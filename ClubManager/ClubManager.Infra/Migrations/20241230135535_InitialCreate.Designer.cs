// <auto-generated />
using System;
using ClubManager.Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClubManager.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241230135535_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("External")
                        .HasColumnType("bit");

                    b.Property<bool>("Internal")
                        .HasColumnType("bit");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClubMemberId");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasFilter("[PlayerId] IS NOT NULL");

                    b.ToTable("Entities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClubMemberId = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(6542),
                            EntityName = "Kozey, Torphy and Bayer",
                            EntityType = "Club",
                            External = true,
                            Internal = false,
                            PlayerId = 5L
                        },
                        new
                        {
                            Id = 2L,
                            ClubMemberId = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7046),
                            EntityName = "Bruen - Kertzmann",
                            EntityType = "Club",
                            External = true,
                            Internal = false,
                            PlayerId = 4L
                        },
                        new
                        {
                            Id = 3L,
                            ClubMemberId = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7138),
                            EntityName = "Gerlach Group",
                            EntityType = "Club",
                            External = true,
                            Internal = true,
                            PlayerId = 8L
                        },
                        new
                        {
                            Id = 4L,
                            ClubMemberId = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7232),
                            EntityName = "Jast LLC",
                            EntityType = "Sponsor",
                            External = false,
                            Internal = true,
                            PlayerId = 7L
                        },
                        new
                        {
                            Id = 5L,
                            ClubMemberId = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7301),
                            EntityName = "Farrell and Sons",
                            EntityType = "Sponsor",
                            External = true,
                            Internal = false,
                            PlayerId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            ClubMemberId = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7347),
                            EntityName = "Thiel - Ondricka",
                            EntityType = "Sponsor",
                            External = true,
                            Internal = true,
                            PlayerId = 10L
                        },
                        new
                        {
                            Id = 7L,
                            ClubMemberId = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7406),
                            EntityName = "Crona - Harvey",
                            EntityType = "Player",
                            External = false,
                            Internal = true,
                            PlayerId = 9L
                        },
                        new
                        {
                            Id = 8L,
                            ClubMemberId = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7449),
                            EntityName = "Zemlak, Macejkovic and Breitenberg",
                            EntityType = "Player",
                            External = false,
                            Internal = false,
                            PlayerId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            ClubMemberId = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7535),
                            EntityName = "Nikolaus, Gutkowski and Grady",
                            EntityType = "Manager",
                            External = false,
                            Internal = false,
                            PlayerId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            ClubMemberId = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 533, DateTimeKind.Local).AddTicks(7613),
                            EntityName = "Morissette, O'Kon and Labadie",
                            EntityType = "Club",
                            External = true,
                            Internal = false,
                            PlayerId = 6L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ResponsibleUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EntityId");

                    b.HasIndex("ResponsibleUserId")
                        .IsUnique();

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 776.91m,
                            CategoryId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(6056),
                            Description = "Enim ad consequuntur sint qui libero.",
                            Destination = "DuBuque, Monahan and Effertz",
                            EntityId = 5L,
                            ExpenseDate = new DateTime(2024, 9, 29, 10, 48, 12, 505, DateTimeKind.Local).AddTicks(6573),
                            PaymentReference = "677198692021858403",
                            ResponsibleUserId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 548.50m,
                            CategoryId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(7958),
                            Description = "Rerum nisi eum odit accusantium fugiat dolorum.",
                            Destination = "Pacocha, Jenkins and Ferry",
                            EntityId = 10L,
                            ExpenseDate = new DateTime(2024, 11, 22, 23, 45, 20, 884, DateTimeKind.Local).AddTicks(8235),
                            PaymentReference = "3528-8752-7163-2269",
                            ResponsibleUserId = 7L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 927.97m,
                            CategoryId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(8261),
                            Description = "Rerum atque quod.",
                            Destination = "Hermann LLC",
                            EntityId = 5L,
                            ExpenseDate = new DateTime(2024, 10, 11, 7, 13, 47, 657, DateTimeKind.Local).AddTicks(6697),
                            PaymentReference = "630481191356908748",
                            ResponsibleUserId = 10L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 516.05m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(8519),
                            Description = "Nulla illo perferendis officiis est.",
                            Destination = "Brekke - O'Keefe",
                            EntityId = 6L,
                            ExpenseDate = new DateTime(2024, 4, 22, 12, 37, 39, 24, DateTimeKind.Local).AddTicks(3727),
                            PaymentReference = "4235-1280-1834-2731",
                            ResponsibleUserId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 977.70m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(8722),
                            Description = "Vero porro eum dolorem soluta.",
                            Destination = "Mohr, Collins and Dickens",
                            EntityId = 2L,
                            ExpenseDate = new DateTime(2024, 11, 20, 4, 58, 28, 428, DateTimeKind.Local).AddTicks(5849),
                            PaymentReference = "6759-6325-0809-2475",
                            ResponsibleUserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 384.71m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(8927),
                            Description = "Quia eos modi.",
                            Destination = "Tromp and Sons",
                            EntityId = 1L,
                            ExpenseDate = new DateTime(2024, 7, 31, 9, 4, 26, 351, DateTimeKind.Local).AddTicks(1891),
                            PaymentReference = "4495774228082",
                            ResponsibleUserId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 122.48m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(9110),
                            Description = "Quam eaque minus vel minima temporibus atque voluptatum exercitationem consequuntur.",
                            Destination = "Koelpin and Sons",
                            EntityId = 10L,
                            ExpenseDate = new DateTime(2024, 11, 12, 8, 59, 51, 36, DateTimeKind.Local).AddTicks(2286),
                            PaymentReference = "3638-916172-3361",
                            ResponsibleUserId = 9L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 407.63m,
                            CategoryId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(9310),
                            Description = "Incidunt dolores expedita reprehenderit eos facere quo vel.",
                            Destination = "Gutkowski, Waters and Hoeger",
                            EntityId = 1L,
                            ExpenseDate = new DateTime(2024, 8, 30, 12, 58, 44, 254, DateTimeKind.Local).AddTicks(9652),
                            PaymentReference = "6511-6219-9506-3844-8968",
                            ResponsibleUserId = 6L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 620.39m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(9553),
                            Description = "Magnam et ipsum qui.",
                            Destination = "Conn - Sawayn",
                            EntityId = 3L,
                            ExpenseDate = new DateTime(2024, 5, 13, 9, 7, 42, 193, DateTimeKind.Local).AddTicks(4005),
                            PaymentReference = "3550-4654-7649-2213",
                            ResponsibleUserId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 537.14m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 534, DateTimeKind.Local).AddTicks(9737),
                            Description = "Aliquid veritatis harum saepe iste laborum similique qui.",
                            Destination = "Bartoletti, Parisian and Schroeder",
                            EntityId = 2L,
                            ExpenseDate = new DateTime(2024, 1, 6, 13, 49, 24, 44, DateTimeKind.Local).AddTicks(4995),
                            PaymentReference = "6759-8744-7043-4913-14",
                            ResponsibleUserId = 8L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.ExpenseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7422),
                            Description = "Despesas relacionadas com o pagamento de salários a jogadores, treinadores e funcionários.",
                            Name = "Salários"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7427),
                            Description = "Custos associados à compra de equipamento e material desportivo necessário para a equipa.",
                            Name = "Material Desportivo"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7428),
                            Description = "Despesas com viagens e alojamento para jogos fora de casa, incluindo transporte e estadia.",
                            Name = "Custos de Viagem"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7429),
                            Description = "Custos associados à manutenção e reparação do estádio e outras infraestruturas do clube.",
                            Name = "Manutenção do Estádio"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7431),
                            Description = "Despesas com campanhas de marketing e publicidade para promover o clube e atrair patrocinadores e adeptos.",
                            Name = "Marketing e Publicidade"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7432),
                            Description = "Custos gerais de administração, incluindo despesas com escritório e administração do clube.",
                            Name = "Despesas Administrativas"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7433),
                            Description = "Despesas com seguros para proteger o clube, jogadores e infraestruturas contra riscos e danos.",
                            Name = "Seguros"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7434),
                            Description = "Custos com serviços de consultoria e honorários profissionais, como advogados e contabilistas.",
                            Name = "Honorários e Consultoria"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7435),
                            Description = "Custos relacionados com a organização de eventos especiais, como receções, eventos de angariação de fundos e outros eventos promocionais.",
                            Name = "Despesas com Eventos"
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7436),
                            Description = "Custos associados com a formação e desenvolvimento contínuo de jogadores e equipa técnica.",
                            Name = "Despesas com Formação"
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7437),
                            Description = "Custos relacionados com licenças e autorizações necessárias para operar o clube e participar em competições.",
                            Name = "Despesas de Licenciamento"
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7438),
                            Description = "Custos com serviços essenciais, como eletricidade, água e gás para as instalações do clube.",
                            Name = "Despesas de Utilidades"
                        },
                        new
                        {
                            Id = 13L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7439),
                            Description = "Custos com a reparação e manutenção de equipamentos e infraestruturas do clube.",
                            Name = "Despesas de Reparação e Manutenção"
                        },
                        new
                        {
                            Id = 14L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7440),
                            Description = "Custos relacionados com empréstimos e financiamentos, incluindo juros e amortizações.",
                            Name = "Despesas de Empréstimo"
                        },
                        new
                        {
                            Id = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7441),
                            Description = "Custos não categorizados especificamente, mas que podem incluir diversas despesas operacionais e imprevistos.",
                            Name = "Despesas Variáveis"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Revenue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ResponsibleUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RevenueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EntityId");

                    b.HasIndex("ResponsibleUserId")
                        .IsUnique();

                    b.ToTable("Revenues");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 3535.84m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 535, DateTimeKind.Local).AddTicks(8560),
                            Description = "Et voluptatem quaerat est.",
                            EntityId = 10L,
                            PaymentReference = "6706305632319174023",
                            ResponsibleUserId = 5L,
                            RevenueDate = new DateTime(2024, 3, 12, 20, 35, 46, 790, DateTimeKind.Local).AddTicks(2107),
                            Source = "Weber Inc"
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 1399.83m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(150),
                            Description = "Ut consectetur ut ut et et fugiat unde quisquam ipsum.",
                            EntityId = 6L,
                            PaymentReference = "6394-4417-3445-1781",
                            ResponsibleUserId = 6L,
                            RevenueDate = new DateTime(2024, 6, 28, 23, 8, 55, 453, DateTimeKind.Local).AddTicks(8422),
                            Source = "Koelpin, O'Connell and Kreiger"
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 1016.49m,
                            CategoryId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(459),
                            Description = "Sapiente provident quasi.",
                            EntityId = 2L,
                            PaymentReference = "6390-0380-1230-0583",
                            ResponsibleUserId = 9L,
                            RevenueDate = new DateTime(2024, 5, 20, 19, 54, 3, 820, DateTimeKind.Local).AddTicks(42),
                            Source = "Baumbach - Ward"
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 2146.21m,
                            CategoryId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(672),
                            Description = "Vitae repellendus architecto a.",
                            EntityId = 9L,
                            PaymentReference = "6771606463824522",
                            ResponsibleUserId = 1L,
                            RevenueDate = new DateTime(2024, 7, 26, 16, 51, 1, 974, DateTimeKind.Local).AddTicks(7313),
                            Source = "Balistreri - Gorczany"
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 643.14m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(863),
                            Description = "Iusto architecto accusantium maiores excepturi voluptatem modi.",
                            EntityId = 8L,
                            PaymentReference = "3723-845339-51990",
                            ResponsibleUserId = 4L,
                            RevenueDate = new DateTime(2024, 1, 11, 20, 20, 4, 10, DateTimeKind.Local).AddTicks(590),
                            Source = "Huel LLC"
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 3282.54m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(1154),
                            Description = "Odit velit minus molestiae et.",
                            EntityId = 2L,
                            PaymentReference = "3773-017810-44273",
                            ResponsibleUserId = 3L,
                            RevenueDate = new DateTime(2024, 4, 27, 19, 35, 47, 859, DateTimeKind.Local).AddTicks(1585),
                            Source = "Denesik - Homenick"
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 4254.08m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(1342),
                            Description = "Ipsa voluptatem perspiciatis doloribus temporibus omnis excepturi quia.",
                            EntityId = 2L,
                            PaymentReference = "6771905742282081796",
                            ResponsibleUserId = 8L,
                            RevenueDate = new DateTime(2024, 2, 21, 15, 59, 10, 457, DateTimeKind.Local).AddTicks(9899),
                            Source = "Hoeger Inc"
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 1411.13m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(1567),
                            Description = "Cumque quod quae rem et vel nobis ratione ad commodi.",
                            EntityId = 1L,
                            PaymentReference = "6709701935150320",
                            ResponsibleUserId = 7L,
                            RevenueDate = new DateTime(2024, 9, 21, 1, 39, 21, 892, DateTimeKind.Local).AddTicks(1615),
                            Source = "Kihn, Witting and Willms"
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 1321.96m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(1785),
                            Description = "Quis quis sint voluptatem incidunt quam accusantium facilis maxime.",
                            EntityId = 9L,
                            PaymentReference = "630461429528876847",
                            ResponsibleUserId = 2L,
                            RevenueDate = new DateTime(2024, 5, 23, 11, 21, 55, 66, DateTimeKind.Local).AddTicks(3819),
                            Source = "Nienow Inc"
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 2735.25m,
                            CategoryId = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 536, DateTimeKind.Local).AddTicks(1968),
                            Description = "Quia omnis explicabo rerum nisi provident tempore.",
                            EntityId = 1L,
                            PaymentReference = "6771963130641023",
                            ResponsibleUserId = 10L,
                            RevenueDate = new DateTime(2024, 3, 2, 17, 6, 35, 558, DateTimeKind.Local).AddTicks(5515),
                            Source = "Blick - McDermott"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.RevenueCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RevenueCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(6987),
                            Description = "Receitas provenientes de acordos com empresas que patrocinam o clube, como patrocínios de camisas ou nomeação do estádio.",
                            Name = "Patrocínios"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(6994),
                            Description = "Renda gerada com a venda de bilhetes, merchandising e alimentos e bebidas nos dias de jogo.",
                            Name = "Receitas de Dia de Jogo"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(6995),
                            Description = "Receitas recebidas pela venda dos direitos de transmissão dos jogos para televisão ou plataformas de streaming.",
                            Name = "Direitos de Transmissão"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(6996),
                            Description = "Receita gerada pela venda de produtos relacionados ao clube, como camisas, cachecóis e outros artigos.",
                            Name = "Merchandising"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(6997),
                            Description = "Dinheiro recebido como prémio por desempenho em competições, como torneios nacionais ou internacionais.",
                            Name = "Prémios em Dinheiro"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(6998),
                            Description = "Receitas provenientes de parcerias comerciais com marcas e empresas para eventos especiais ou produtos conjuntos.",
                            Name = "Parcerias Comerciais"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(6999),
                            Description = "Receitas das taxas pagas pelos associados do clube para acesso a benefícios exclusivos, como bilhetes preferenciais ou eventos especiais.",
                            Name = "Taxas de Associação"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7000),
                            Description = "Receitas geradas pela venda dos direitos de nomeação do estádio do clube.",
                            Name = "Direitos de Nomeação do Estádio"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7001),
                            Description = "Receitas provenientes da venda ou empréstimo de jogadores para outros clubes.",
                            Name = "Transferências de Jogadores"
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7002),
                            Description = "Receitas geradas pela publicidade dentro do estádio ou em outras plataformas relacionadas ao clube.",
                            Name = "Publicidade"
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7003),
                            Description = "Receitas obtidas com a venda de pacotes de hospitalidade corporativa, que incluem bilhetes para jogos e serviços adicionais.",
                            Name = "Hospedagem Corporativa"
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7004),
                            Description = "Receitas provenientes da realização de eventos especiais no estádio, como concertos ou eventos corporativos.",
                            Name = "Receitas de Eventos"
                        },
                        new
                        {
                            Id = 13L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7005),
                            Description = "Receitas geradas por taxas de inscrição ou desenvolvimento de jovens talentos e futuras transferências.",
                            Name = "Receitas da Academia de Jovens"
                        },
                        new
                        {
                            Id = 14L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7006),
                            Description = "Receitas obtidas pelo aluguel de instalações do clube, como campos de treino ou áreas do estádio para eventos externos.",
                            Name = "Renda de Aluguel"
                        },
                        new
                        {
                            Id = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(7007),
                            Description = "Dinheiro recebido de subsídios governamentais, fundações ou doações privadas para apoiar o clube.",
                            Name = "Subsídios e Doações"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.Institution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HaveTrainingCenter")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialWebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadiumCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StadiumInauguration")
                        .HasColumnType("datetime2");

                    b.Property<string>("StadiumName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingCenterAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Institution");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "08253 Victor Bypass, Jakeberg, New Zealand",
                            Colors = "white",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 465, DateTimeKind.Local).AddTicks(2749),
                            FoundationDate = new DateTime(1963, 11, 20, 12, 14, 9, 492, DateTimeKind.Local).AddTicks(960),
                            HaveTrainingCenter = true,
                            Name = "Sipes and Sons",
                            OfficialWebsiteUrl = "https://aurelie.com",
                            SocialMediaLinks = "https://harrison.org",
                            StadiumCapacity = 35753,
                            StadiumInauguration = new DateTime(1986, 12, 2, 4, 44, 34, 750, DateTimeKind.Local).AddTicks(6938),
                            StadiumName = "earum"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfLastAccess")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpire")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpire")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorActivated")
                        .HasColumnType("bit");

                    b.Property<long>("UserPermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserPermissionId")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(3805),
                            DateOfLastAccess = new DateTime(2024, 12, 29, 16, 9, 53, 546, DateTimeKind.Local).AddTicks(5570),
                            Email = "Fern.Pfeffer@hotmail.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 5, 13, 11, 39, 28, 859, DateTimeKind.Local).AddTicks(8867),
                            PasswordHash = new byte[] { 68, 20, 86, 216, 105, 208, 103, 146, 143, 133, 13, 217, 87, 170, 225, 110, 237, 130, 180, 244 },
                            PasswordResetToken = "2smj3hr5",
                            PasswordResetTokenExpire = new DateTime(2025, 7, 12, 10, 6, 51, 50, DateTimeKind.Local).AddTicks(3799),
                            PasswordSalt = new byte[] { 49, 195, 172, 58, 54, 205, 112, 184, 167, 14, 168, 140, 94, 179, 156, 205, 133, 26, 80, 189 },
                            PhoneNumber = "700.661.0860 x94694",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "lc9kxav3zk4j97tq",
                            RefreshTokenExpire = new DateTime(2025, 11, 21, 3, 38, 10, 963, DateTimeKind.Local).AddTicks(594),
                            TwoFactorActivated = true,
                            UserPermissionId = 1L,
                            UserRoleId = 6L,
                            Username = "Elbert56"
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 5,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5018),
                            DateOfLastAccess = new DateTime(2024, 12, 29, 17, 58, 48, 70, DateTimeKind.Local).AddTicks(937),
                            Email = "Reina_Harber76@gmail.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 12, 26, 4, 15, 18, 424, DateTimeKind.Local).AddTicks(1100),
                            PasswordHash = new byte[] { 85, 37, 159, 209, 5, 225, 77, 212, 250, 219, 227, 110, 244, 247, 48, 231, 190, 183, 253, 66 },
                            PasswordResetToken = "40f2hne4",
                            PasswordResetTokenExpire = new DateTime(2025, 2, 10, 20, 10, 41, 83, DateTimeKind.Local).AddTicks(311),
                            PasswordSalt = new byte[] { 229, 149, 156, 42, 189, 84, 214, 118, 22, 21, 153, 75, 224, 75, 250, 145, 148, 175, 40, 104 },
                            PhoneNumber = "564.382.7053",
                            PhoneNumberConfirmed = true,
                            RefreshToken = "44ci3l7b2wx3gad7",
                            RefreshTokenExpire = new DateTime(2025, 8, 23, 13, 51, 58, 570, DateTimeKind.Local).AddTicks(5329),
                            TwoFactorActivated = false,
                            UserPermissionId = 2L,
                            UserRoleId = 7L,
                            Username = "Sim20"
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5190),
                            DateOfLastAccess = new DateTime(2024, 12, 29, 16, 48, 22, 463, DateTimeKind.Local).AddTicks(6913),
                            Email = "Augusta_Reynolds3@hotmail.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 6, 20, 23, 28, 38, 560, DateTimeKind.Local).AddTicks(7308),
                            PasswordHash = new byte[] { 203, 1, 40, 34, 17, 66, 11, 126, 229, 235, 177, 47, 142, 5, 212, 251, 205, 189, 212, 76 },
                            PasswordResetToken = "dm27iavs",
                            PasswordResetTokenExpire = new DateTime(2025, 4, 25, 23, 13, 15, 591, DateTimeKind.Local).AddTicks(5193),
                            PasswordSalt = new byte[] { 110, 110, 228, 97, 164, 91, 87, 29, 117, 108, 3, 156, 253, 138, 120, 10, 6, 102, 128, 207 },
                            PhoneNumber = "791-353-2262",
                            PhoneNumberConfirmed = true,
                            RefreshToken = "kwazvemovoeo0mjh",
                            RefreshTokenExpire = new DateTime(2025, 8, 8, 0, 1, 23, 556, DateTimeKind.Local).AddTicks(4980),
                            TwoFactorActivated = true,
                            UserPermissionId = 3L,
                            UserRoleId = 3L,
                            Username = "Dangelo14"
                        },
                        new
                        {
                            Id = 4L,
                            AccessFailedCount = 4,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5373),
                            DateOfLastAccess = new DateTime(2024, 12, 30, 7, 9, 34, 567, DateTimeKind.Local).AddTicks(6537),
                            Email = "Kristin_Mante@hotmail.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 12, 13, 8, 8, 17, 38, DateTimeKind.Local).AddTicks(3582),
                            PasswordHash = new byte[] { 101, 64, 198, 217, 221, 148, 218, 118, 222, 132, 84, 87, 75, 49, 46, 74, 226, 144, 245, 103 },
                            PasswordResetToken = "azlhics2",
                            PasswordResetTokenExpire = new DateTime(2025, 12, 7, 20, 58, 55, 717, DateTimeKind.Local).AddTicks(3006),
                            PasswordSalt = new byte[] { 198, 155, 200, 124, 234, 217, 138, 144, 149, 31, 52, 50, 248, 84, 239, 11, 6, 60, 235, 159 },
                            PhoneNumber = "388.576.6685 x5026",
                            PhoneNumberConfirmed = true,
                            RefreshToken = "rxghutg7b0xjr8fe",
                            RefreshTokenExpire = new DateTime(2025, 10, 3, 6, 45, 33, 608, DateTimeKind.Local).AddTicks(3905),
                            TwoFactorActivated = true,
                            UserPermissionId = 4L,
                            UserRoleId = 6L,
                            Username = "Julianne.Bergstrom"
                        },
                        new
                        {
                            Id = 5L,
                            AccessFailedCount = 5,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5491),
                            DateOfLastAccess = new DateTime(2024, 12, 29, 17, 35, 33, 250, DateTimeKind.Local).AddTicks(9181),
                            Email = "Raul35@yahoo.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 3, 3, 8, 42, 14, 174, DateTimeKind.Local).AddTicks(9602),
                            PasswordHash = new byte[] { 99, 43, 160, 32, 227, 149, 171, 135, 60, 96, 120, 85, 67, 26, 70, 19, 62, 75, 211, 58 },
                            PasswordResetToken = "gb1shyz6",
                            PasswordResetTokenExpire = new DateTime(2025, 5, 23, 7, 35, 20, 336, DateTimeKind.Local).AddTicks(8707),
                            PasswordSalt = new byte[] { 89, 40, 39, 126, 56, 131, 86, 136, 142, 188, 127, 106, 10, 219, 66, 28, 14, 233, 8, 180 },
                            PhoneNumber = "(510) 528-4218 x253",
                            PhoneNumberConfirmed = true,
                            RefreshToken = "zrr0t3qag8wgrckv",
                            RefreshTokenExpire = new DateTime(2025, 6, 27, 0, 22, 4, 125, DateTimeKind.Local).AddTicks(3572),
                            TwoFactorActivated = false,
                            UserPermissionId = 5L,
                            UserRoleId = 7L,
                            Username = "Bernadette46"
                        },
                        new
                        {
                            Id = 6L,
                            AccessFailedCount = 5,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5613),
                            DateOfLastAccess = new DateTime(2024, 12, 30, 6, 50, 20, 287, DateTimeKind.Local).AddTicks(978),
                            Email = "Amanda.Sanford@yahoo.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 5, 12, 15, 19, 51, 862, DateTimeKind.Local).AddTicks(3625),
                            PasswordHash = new byte[] { 136, 154, 60, 254, 31, 154, 213, 101, 10, 60, 149, 74, 130, 109, 24, 216, 203, 114, 174, 151 },
                            PasswordResetToken = "g7v48jt1",
                            PasswordResetTokenExpire = new DateTime(2025, 3, 1, 20, 23, 5, 722, DateTimeKind.Local).AddTicks(8648),
                            PasswordSalt = new byte[] { 101, 171, 71, 177, 56, 127, 152, 86, 85, 74, 134, 10, 44, 52, 242, 130, 214, 177, 177, 27 },
                            PhoneNumber = "684-498-9784",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "orewcle1qc0tbygb",
                            RefreshTokenExpire = new DateTime(2025, 10, 15, 15, 5, 46, 758, DateTimeKind.Local).AddTicks(2208),
                            TwoFactorActivated = false,
                            UserPermissionId = 6L,
                            UserRoleId = 3L,
                            Username = "Kieran.Collier"
                        },
                        new
                        {
                            Id = 7L,
                            AccessFailedCount = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5698),
                            DateOfLastAccess = new DateTime(2024, 12, 29, 15, 14, 30, 580, DateTimeKind.Local).AddTicks(1560),
                            Email = "Heaven_Moore36@hotmail.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 10, 1, 10, 23, 10, 873, DateTimeKind.Local).AddTicks(2433),
                            PasswordHash = new byte[] { 23, 112, 245, 238, 154, 166, 64, 238, 48, 55, 111, 253, 242, 122, 75, 17, 140, 168, 86, 100 },
                            PasswordResetToken = "zhwn72y6",
                            PasswordResetTokenExpire = new DateTime(2025, 9, 4, 9, 11, 50, 585, DateTimeKind.Local).AddTicks(3159),
                            PasswordSalt = new byte[] { 24, 16, 190, 238, 85, 132, 19, 217, 137, 193, 73, 30, 43, 211, 102, 120, 233, 201, 99, 99 },
                            PhoneNumber = "499-420-2769",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "55e3mtl6g79vses9",
                            RefreshTokenExpire = new DateTime(2025, 3, 26, 13, 40, 25, 734, DateTimeKind.Local).AddTicks(1456),
                            TwoFactorActivated = true,
                            UserPermissionId = 7L,
                            UserRoleId = 1L,
                            Username = "Jackson79"
                        },
                        new
                        {
                            Id = 8L,
                            AccessFailedCount = 3,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5794),
                            DateOfLastAccess = new DateTime(2024, 12, 29, 20, 12, 57, 779, DateTimeKind.Local).AddTicks(7717),
                            Email = "Jackson86@yahoo.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 10, 21, 9, 28, 31, 906, DateTimeKind.Local).AddTicks(9607),
                            PasswordHash = new byte[] { 30, 58, 69, 205, 208, 135, 217, 38, 88, 4, 213, 159, 127, 113, 224, 201, 90, 164, 93, 50 },
                            PasswordResetToken = "joyfh78i",
                            PasswordResetTokenExpire = new DateTime(2025, 1, 4, 17, 14, 21, 986, DateTimeKind.Local).AddTicks(2710),
                            PasswordSalt = new byte[] { 91, 107, 28, 3, 108, 196, 131, 134, 181, 194, 66, 221, 82, 232, 107, 39, 86, 200, 55, 221 },
                            PhoneNumber = "(245) 303-8265 x0093",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "ezm0iwdc94dbj5hq",
                            RefreshTokenExpire = new DateTime(2025, 11, 9, 21, 3, 54, 380, DateTimeKind.Local).AddTicks(4560),
                            TwoFactorActivated = false,
                            UserPermissionId = 8L,
                            UserRoleId = 2L,
                            Username = "Julius.Terry61"
                        },
                        new
                        {
                            Id = 9L,
                            AccessFailedCount = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5882),
                            DateOfLastAccess = new DateTime(2024, 12, 30, 11, 11, 13, 770, DateTimeKind.Local).AddTicks(2978),
                            Email = "Madge_Stamm80@gmail.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 8, 25, 2, 36, 57, 183, DateTimeKind.Local).AddTicks(1724),
                            PasswordHash = new byte[] { 51, 234, 43, 21, 123, 29, 235, 106, 11, 137, 174, 219, 242, 114, 230, 98, 250, 143, 240, 213 },
                            PasswordResetToken = "uhpqrhii",
                            PasswordResetTokenExpire = new DateTime(2025, 2, 7, 8, 53, 37, 389, DateTimeKind.Local).AddTicks(8444),
                            PasswordSalt = new byte[] { 103, 58, 51, 209, 200, 6, 8, 77, 156, 155, 174, 173, 167, 229, 90, 95, 207, 64, 242, 167 },
                            PhoneNumber = "471-904-5053 x8001",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "sdc0d5c4dwi28ers",
                            RefreshTokenExpire = new DateTime(2025, 9, 7, 10, 39, 1, 373, DateTimeKind.Local).AddTicks(5986),
                            TwoFactorActivated = false,
                            UserPermissionId = 9L,
                            UserRoleId = 7L,
                            Username = "Clyde_Bergstrom"
                        },
                        new
                        {
                            Id = 10L,
                            AccessFailedCount = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(5980),
                            DateOfLastAccess = new DateTime(2024, 12, 30, 11, 52, 25, 27, DateTimeKind.Local).AddTicks(7824),
                            Email = "Alena_Rutherford95@hotmail.com",
                            InstitutionId = 1L,
                            LockoutEnd = new DateTime(2024, 8, 17, 19, 45, 28, 930, DateTimeKind.Local).AddTicks(3987),
                            PasswordHash = new byte[] { 186, 234, 190, 164, 203, 176, 13, 31, 81, 159, 167, 216, 12, 7, 162, 110, 107, 9, 93, 0 },
                            PasswordResetToken = "7kgu51y9",
                            PasswordResetTokenExpire = new DateTime(2025, 4, 2, 15, 48, 13, 612, DateTimeKind.Local).AddTicks(5461),
                            PasswordSalt = new byte[] { 144, 93, 172, 130, 226, 37, 21, 27, 172, 73, 247, 216, 193, 209, 90, 35, 69, 71, 185, 2 },
                            PhoneNumber = "406-831-0635 x93869",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "s5vrtugqgpeh10pm",
                            RefreshTokenExpire = new DateTime(2025, 3, 24, 6, 50, 38, 613, DateTimeKind.Local).AddTicks(5620),
                            TwoFactorActivated = true,
                            UserPermissionId = 10L,
                            UserRoleId = 6L,
                            Username = "Eddie_Deckow75"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.UserPermissions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Consult")
                        .HasColumnType("bit");

                    b.Property<bool>("Create")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Consult = false,
                            Create = false,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4394),
                            Delete = false,
                            Edit = true
                        },
                        new
                        {
                            Id = 2L,
                            Consult = false,
                            Create = false,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4528),
                            Delete = false,
                            Edit = true
                        },
                        new
                        {
                            Id = 3L,
                            Consult = true,
                            Create = true,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4537),
                            Delete = true,
                            Edit = false
                        },
                        new
                        {
                            Id = 4L,
                            Consult = true,
                            Create = true,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4542),
                            Delete = true,
                            Edit = true
                        },
                        new
                        {
                            Id = 5L,
                            Consult = false,
                            Create = false,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4545),
                            Delete = false,
                            Edit = false
                        },
                        new
                        {
                            Id = 6L,
                            Consult = true,
                            Create = true,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4549),
                            Delete = true,
                            Edit = false
                        },
                        new
                        {
                            Id = 7L,
                            Consult = false,
                            Create = true,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4553),
                            Delete = false,
                            Edit = true
                        },
                        new
                        {
                            Id = 8L,
                            Consult = true,
                            Create = false,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4557),
                            Delete = false,
                            Edit = false
                        },
                        new
                        {
                            Id = 9L,
                            Consult = false,
                            Create = true,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4562),
                            Delete = false,
                            Edit = false
                        },
                        new
                        {
                            Id = 10L,
                            Consult = false,
                            Create = true,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 466, DateTimeKind.Local).AddTicks(4565),
                            Delete = false,
                            Edit = true
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.UserRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 463, DateTimeKind.Local).AddTicks(6613),
                            Description = "Função administrativa para gerenciamento da instituição. Acesso total a toda a informação dentro da instituição.",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 463, DateTimeKind.Local).AddTicks(6668),
                            Description = "Supervisiona todas as operações do clube, toma decisões estratégicas e tem acesso a todos as operações e funcionalidades da aplicação.",
                            Name = "Presidente"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 463, DateTimeKind.Local).AddTicks(6669),
                            Description = "Encarregado das operações futebolísticas, incluindo gestão de treinadores, jogadores, transferências e contratações.",
                            Name = "Diretor Desportivo"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 463, DateTimeKind.Local).AddTicks(6670),
                            Description = "Gere a equipe técnica, planeia treinos, táticas de jogo, escolhe a equipa para os jogos e monitoriza o desempenho dos jogadores.",
                            Name = "Treinador"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 463, DateTimeKind.Local).AddTicks(6671),
                            Description = "Gere as finanças do clube, incluindo orçamento, salários, receitas de bilheteira, patrocínios e outras fontes de receita.",
                            Name = "Diretor Financeiro"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 463, DateTimeKind.Local).AddTicks(6673),
                            Description = "Gere as instalações do clube, incluindo estádios, campos de treino e outras infraestruturas.",
                            Name = "Gestor de Infraestruturas"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 463, DateTimeKind.Local).AddTicks(6674),
                            Description = "Trata de toda a documentação e administração necessária para o funcionamento do clube.",
                            Name = "Secretário"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.Facility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityCategoryId");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Capacity = 278,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 529, DateTimeKind.Local).AddTicks(2889),
                            Description = "Ad velit voluptas alias sint iure voluptates voluptatum. Est error accusantium. Omnis est facilis autem non nam quidem rerum dolores eos. Animi odit recusandae iure tempora cupiditate voluptatem sed. Ullam placeat accusantium et illo necessitatibus consectetur non officiis.",
                            FacilityCategoryId = 6L,
                            Location = "05870 Kian Stream, New Guiseppebury, France",
                            Name = "Licensed Plastic Pizza"
                        },
                        new
                        {
                            Id = 2L,
                            Capacity = 2655,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 529, DateTimeKind.Local).AddTicks(5382),
                            Description = "Pariatur rerum ipsam quis consequatur. Atque facere cupiditate voluptates minus delectus eius perferendis labore animi. Quis deserunt qui excepturi sint beatae exercitationem iure. Sint qui officia non iusto. Sunt laboriosam beatae est dolorum optio voluptatum qui architecto est.",
                            FacilityCategoryId = 3L,
                            Location = "44650 Casper Groves, D'Amoreberg, Tunisia",
                            Name = "Awesome Metal Chips"
                        },
                        new
                        {
                            Id = 3L,
                            Capacity = 1249,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 529, DateTimeKind.Local).AddTicks(5688),
                            Description = "Quae quibusdam et doloribus numquam earum molestiae mollitia. Quibusdam repellat et rerum qui a qui est. Excepturi ea quo accusantium dolorum. Eum et excepturi et similique quaerat ipsa nihil eum enim.",
                            FacilityCategoryId = 5L,
                            Location = "93654 Kunde Terrace, Pascaleborough, Jordan",
                            Name = "Practical Fresh Cheese"
                        },
                        new
                        {
                            Id = 4L,
                            Capacity = 229,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 529, DateTimeKind.Local).AddTicks(5930),
                            Description = "Mollitia repellat ab ea ab est voluptas omnis et temporibus. Sequi illo ut impedit quia dolor. Id quaerat fugiat suscipit autem molestias tempora molestiae eum veniam.",
                            FacilityCategoryId = 2L,
                            Location = "269 Alexis Turnpike, Lizzieborough, Colombia",
                            Name = "Rustic Fresh Car"
                        },
                        new
                        {
                            Id = 5L,
                            Capacity = 3637,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 529, DateTimeKind.Local).AddTicks(6088),
                            Description = "Soluta qui temporibus voluptas est minima. Et reiciendis minus ut at et qui aut sequi omnis. Quis vitae ut ut et magnam neque.",
                            FacilityCategoryId = 4L,
                            Location = "762 Amira Viaduct, Lake Agnes, Monaco",
                            Name = "Unbranded Frozen Table"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.FacilityCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FacilityCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 528, DateTimeKind.Local).AddTicks(4681),
                            Description = "Outdoor or indoor areas designed for sports activities, such as soccer fields, tennis courts, etc.",
                            Name = "Sports Field"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 528, DateTimeKind.Local).AddTicks(4686),
                            Description = "Fitness centers equipped with exercise machines, weights, and other fitness equipment.",
                            Name = "Gym"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 528, DateTimeKind.Local).AddTicks(4688),
                            Description = "Rooms designated for meetings, conferences, and other business-related gatherings.",
                            Name = "Meeting Room"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 528, DateTimeKind.Local).AddTicks(4689),
                            Description = "Facilities providing restroom and changing areas, including showers and lockers.",
                            Name = "Restroom"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 528, DateTimeKind.Local).AddTicks(4689),
                            Description = "Workspaces for administrative tasks, including private offices and open office areas.",
                            Name = "Office"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 528, DateTimeKind.Local).AddTicks(4690),
                            Description = "Large rooms or halls designed for lectures, presentations, and performances.",
                            Name = "Auditorium"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.FacilityReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReservedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ReservedUserId");

                    b.ToTable("FacilityReservations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5435),
                            EndTime = new DateTime(2025, 3, 1, 22, 44, 45, 468, DateTimeKind.Local).AddTicks(6849),
                            EventDescription = "Ex ea veritatis praesentium nesciunt.",
                            EventType = "velit",
                            FacilityId = 5L,
                            ReservedUserId = 9L,
                            StartTime = new DateTime(2025, 3, 1, 18, 44, 45, 468, DateTimeKind.Local).AddTicks(6849)
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5717),
                            EndTime = new DateTime(2025, 5, 8, 17, 16, 50, 884, DateTimeKind.Local).AddTicks(5092),
                            EventDescription = "Ad sunt veniam autem aperiam inventore animi doloribus.",
                            EventType = "ratione",
                            FacilityId = 4L,
                            ReservedUserId = 4L,
                            StartTime = new DateTime(2025, 5, 8, 13, 16, 50, 884, DateTimeKind.Local).AddTicks(5092)
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5754),
                            EndTime = new DateTime(2025, 1, 27, 17, 31, 23, 317, DateTimeKind.Local).AddTicks(1478),
                            EventDescription = "Deserunt omnis delectus dolore voluptas quia vitae saepe cum.",
                            EventType = "et",
                            FacilityId = 3L,
                            ReservedUserId = 6L,
                            StartTime = new DateTime(2025, 1, 27, 15, 31, 23, 317, DateTimeKind.Local).AddTicks(1478)
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5786),
                            EndTime = new DateTime(2025, 8, 25, 3, 27, 39, 159, DateTimeKind.Local).AddTicks(1362),
                            EventDescription = "Autem quia facilis magni dolorem accusantium ipsum reiciendis nobis doloribus.",
                            EventType = "ipsum",
                            FacilityId = 1L,
                            ReservedUserId = 3L,
                            StartTime = new DateTime(2025, 8, 25, 1, 27, 39, 159, DateTimeKind.Local).AddTicks(1362)
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5817),
                            EndTime = new DateTime(2025, 2, 23, 1, 40, 53, 298, DateTimeKind.Local).AddTicks(3711),
                            EventDescription = "Ducimus reiciendis quia voluptates dignissimos est et.",
                            EventType = "et",
                            FacilityId = 3L,
                            ReservedUserId = 3L,
                            StartTime = new DateTime(2025, 2, 22, 21, 40, 53, 298, DateTimeKind.Local).AddTicks(3711)
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5844),
                            EndTime = new DateTime(2025, 8, 21, 4, 5, 21, 497, DateTimeKind.Local).AddTicks(4265),
                            EventDescription = "Impedit possimus ut unde eos ea libero.",
                            EventType = "eligendi",
                            FacilityId = 3L,
                            ReservedUserId = 7L,
                            StartTime = new DateTime(2025, 8, 21, 1, 5, 21, 497, DateTimeKind.Local).AddTicks(4265)
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5891),
                            EndTime = new DateTime(2025, 11, 7, 5, 53, 41, 242, DateTimeKind.Local).AddTicks(5229),
                            EventDescription = "Enim dolor voluptas at eaque alias eligendi consequuntur veniam.",
                            EventType = "unde",
                            FacilityId = 2L,
                            ReservedUserId = 7L,
                            StartTime = new DateTime(2025, 11, 7, 1, 53, 41, 242, DateTimeKind.Local).AddTicks(5229)
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5918),
                            EndTime = new DateTime(2025, 5, 7, 13, 36, 27, 558, DateTimeKind.Local).AddTicks(3924),
                            EventDescription = "Magni fugiat est beatae consequatur nisi repellat enim quas.",
                            EventType = "esse",
                            FacilityId = 2L,
                            ReservedUserId = 1L,
                            StartTime = new DateTime(2025, 5, 7, 10, 36, 27, 558, DateTimeKind.Local).AddTicks(3924)
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5944),
                            EndTime = new DateTime(2025, 6, 21, 0, 51, 51, 114, DateTimeKind.Local).AddTicks(1913),
                            EventDescription = "Repudiandae eligendi iusto ab eum et ipsa quae officia veniam.",
                            EventType = "hic",
                            FacilityId = 4L,
                            ReservedUserId = 1L,
                            StartTime = new DateTime(2025, 6, 20, 21, 51, 51, 114, DateTimeKind.Local).AddTicks(1913)
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 530, DateTimeKind.Local).AddTicks(5974),
                            EndTime = new DateTime(2025, 8, 1, 22, 55, 38, 260, DateTimeKind.Local).AddTicks(9991),
                            EventDescription = "Ut rerum veritatis quibusdam ut at alias et facere corrupti.",
                            EventType = "quod",
                            FacilityId = 2L,
                            ReservedUserId = 4L,
                            StartTime = new DateTime(2025, 8, 1, 18, 55, 38, 260, DateTimeKind.Local).AddTicks(9991)
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.MaintenanceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RequestUserId");

                    b.ToTable("MaintenanceHistories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 531, DateTimeKind.Local).AddTicks(4227),
                            Description = "Quaerat quis rerum incidunt voluptas voluptatem.",
                            FacilityId = 5L,
                            MaintenanceDate = new DateTime(2024, 5, 15, 5, 1, 36, 439, DateTimeKind.Local).AddTicks(2153),
                            MaintenanceType = "Corretiva",
                            RequestUserId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 531, DateTimeKind.Local).AddTicks(5129),
                            Description = "Atque maxime quis et et possimus.",
                            FacilityId = 5L,
                            MaintenanceDate = new DateTime(2024, 4, 9, 16, 19, 26, 931, DateTimeKind.Local).AddTicks(6280),
                            MaintenanceType = "Urgente",
                            RequestUserId = 8L
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 531, DateTimeKind.Local).AddTicks(5193),
                            Description = "Beatae voluptas ut ipsa quia aut qui.",
                            FacilityId = 1L,
                            MaintenanceDate = new DateTime(2024, 11, 28, 3, 58, 52, 865, DateTimeKind.Local).AddTicks(2567),
                            MaintenanceType = "Corretiva",
                            RequestUserId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 531, DateTimeKind.Local).AddTicks(5220),
                            Description = "Accusantium voluptatem velit non et quaerat aut veniam quaerat vitae.",
                            FacilityId = 4L,
                            MaintenanceDate = new DateTime(2024, 6, 30, 2, 11, 46, 675, DateTimeKind.Local).AddTicks(4267),
                            MaintenanceType = "Urgente",
                            RequestUserId = 6L
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 531, DateTimeKind.Local).AddTicks(5247),
                            Description = "Harum atque velit numquam quo est.",
                            FacilityId = 4L,
                            MaintenanceDate = new DateTime(2024, 1, 24, 12, 12, 28, 804, DateTimeKind.Local).AddTicks(1881),
                            MaintenanceType = "Preventiva",
                            RequestUserId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 531, DateTimeKind.Local).AddTicks(5267),
                            Description = "Aut rerum eum totam dolore.",
                            FacilityId = 4L,
                            MaintenanceDate = new DateTime(2024, 4, 24, 2, 59, 36, 668, DateTimeKind.Local).AddTicks(5397),
                            MaintenanceType = "Corretiva",
                            RequestUserId = 8L
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 531, DateTimeKind.Local).AddTicks(5289),
                            Description = "Quo esse qui hic reiciendis voluptatem.",
                            FacilityId = 3L,
                            MaintenanceDate = new DateTime(2024, 4, 19, 13, 22, 59, 401, DateTimeKind.Local).AddTicks(569),
                            MaintenanceType = "Corretiva",
                            RequestUserId = 10L
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 531, DateTimeKind.Local).AddTicks(5307),
                            Description = "Nostrum ea et quisquam pariatur aut eaque consectetur.",
                            FacilityId = 1L,
                            MaintenanceDate = new DateTime(2024, 2, 28, 14, 38, 8, 146, DateTimeKind.Local).AddTicks(2852),
                            MaintenanceType = "Preventiva",
                            RequestUserId = 5L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.MaintenanceRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RequestedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RequestedUserId");

                    b.ToTable("MaintenanceRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(3705),
                            FacilityId = 5L,
                            MaintenanceType = "Hidráulica",
                            Priority = "Média",
                            ProblemDescription = "Voluptatem dicta ex laboriosam. Aut reiciendis quia. Dolores esse sunt labore sed rerum qui et sint. Saepe omnis assumenda ducimus sint eos tempore doloremque accusantium. Ut aut doloremque quis quisquam sequi dolorem.",
                            RequestDate = new DateTime(2023, 7, 27, 22, 7, 31, 201, DateTimeKind.Local).AddTicks(673),
                            RequestedUserId = 5L,
                            Status = "Em Andamento"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(4525),
                            FacilityId = 1L,
                            MaintenanceType = "Estrutural",
                            Priority = "Baixa",
                            ProblemDescription = "Praesentium illo et quisquam qui voluptate quod. Excepturi dolores nesciunt. Voluptates doloribus nobis rerum at quo. Quam eum aut.",
                            RequestDate = new DateTime(2024, 7, 11, 12, 34, 41, 390, DateTimeKind.Local).AddTicks(7934),
                            RequestedUserId = 6L,
                            Status = "Em Andamento"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(4644),
                            FacilityId = 5L,
                            MaintenanceType = "Estrutural",
                            Priority = "Alta",
                            ProblemDescription = "Est minima maiores blanditiis dolore animi dolor. Cumque quasi blanditiis sed qui sed non id. Quae recusandae suscipit ipsam et beatae assumenda nobis. Non et vero veritatis. Earum perspiciatis tempora nesciunt dolor asperiores neque.",
                            RequestDate = new DateTime(2024, 4, 12, 2, 9, 29, 147, DateTimeKind.Local).AddTicks(6860),
                            RequestedUserId = 10L,
                            Status = "Em Andamento"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(4779),
                            FacilityId = 1L,
                            MaintenanceType = "Hidráulica",
                            Priority = "Alta",
                            ProblemDescription = "Ut alias facere est rerum enim. Qui fugit assumenda nihil labore aut aut pariatur fuga animi. Odit quos dolorem velit. Architecto aut maiores consequuntur expedita nobis ipsum non voluptas omnis.",
                            RequestDate = new DateTime(2024, 5, 9, 10, 13, 18, 416, DateTimeKind.Local).AddTicks(6688),
                            RequestedUserId = 4L,
                            Status = "Cancelado"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(4943),
                            FacilityId = 5L,
                            MaintenanceType = "Estrutural",
                            Priority = "Baixa",
                            ProblemDescription = "Ex reiciendis quia et aperiam velit eius dolore dignissimos aut. Dolores sapiente accusamus quo labore. Est totam iure accusamus dolor libero sunt est. In minima nulla odio reprehenderit. Sunt sit incidunt doloremque error ad.",
                            RequestDate = new DateTime(2023, 8, 28, 22, 28, 6, 636, DateTimeKind.Local).AddTicks(7188),
                            RequestedUserId = 10L,
                            Status = "Concluído"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(5020),
                            FacilityId = 5L,
                            MaintenanceType = "Hidráulica",
                            Priority = "Alta",
                            ProblemDescription = "Et iure veniam dolore quibusdam veniam. Possimus voluptatem aut qui qui. Eveniet rerum amet distinctio non occaecati est ad quibusdam.",
                            RequestDate = new DateTime(2023, 9, 21, 1, 5, 39, 808, DateTimeKind.Local).AddTicks(7800),
                            RequestedUserId = 8L,
                            Status = "Em Andamento"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(5090),
                            FacilityId = 4L,
                            MaintenanceType = "Hidráulica",
                            Priority = "Média",
                            ProblemDescription = "Et quasi culpa adipisci et eum numquam libero nam. Culpa earum laudantium reprehenderit quo et delectus. Consectetur exercitationem ipsa deleniti est neque aut sint sint explicabo. Ut sint libero asperiores cumque quam voluptatem nisi. Et laboriosam voluptatem eum.",
                            RequestDate = new DateTime(2023, 10, 5, 21, 43, 9, 524, DateTimeKind.Local).AddTicks(9536),
                            RequestedUserId = 8L,
                            Status = "Cancelado"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(5172),
                            FacilityId = 4L,
                            MaintenanceType = "Hidráulica",
                            Priority = "Média",
                            ProblemDescription = "Ut fuga accusantium praesentium tempora quae qui et. Aperiam temporibus ullam aliquam aut voluptate minima atque quis culpa. Quo accusantium alias rem neque consequuntur aut sequi corporis. Officiis placeat ut. Laboriosam quaerat ratione repellat totam aut qui.",
                            RequestDate = new DateTime(2023, 10, 21, 6, 9, 15, 47, DateTimeKind.Local).AddTicks(1843),
                            RequestedUserId = 2L,
                            Status = "Aberto"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(5260),
                            FacilityId = 4L,
                            MaintenanceType = "Hidráulica",
                            Priority = "Alta",
                            ProblemDescription = "Dignissimos repellendus eos doloremque qui. Fugiat iure beatae temporibus ea non. Nam et corrupti quia reiciendis.",
                            RequestDate = new DateTime(2024, 7, 31, 17, 50, 24, 636, DateTimeKind.Local).AddTicks(2378),
                            RequestedUserId = 1L,
                            Status = "Cancelado"
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(5300),
                            FacilityId = 4L,
                            MaintenanceType = "Elétrica",
                            Priority = "Média",
                            ProblemDescription = "Temporibus officia nobis perspiciatis omnis reprehenderit nihil repudiandae molestiae. Facilis incidunt dolorem facilis et placeat ipsam explicabo recusandae qui. Maxime modi at repellat sunt neque similique vel hic. Hic ipsum odit quas.",
                            RequestDate = new DateTime(2024, 7, 21, 2, 0, 9, 859, DateTimeKind.Local).AddTicks(245),
                            RequestedUserId = 6L,
                            Status = "Concluído"
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(5397),
                            FacilityId = 5L,
                            MaintenanceType = "Estrutural",
                            Priority = "Baixa",
                            ProblemDescription = "Optio accusamus consequatur. Vel repellat maxime quam quasi numquam magni. Occaecati quo quod. Assumenda aut tempora atque et iusto placeat temporibus quod. Placeat non ratione quod eum explicabo corrupti deserunt quidem cupiditate.",
                            RequestDate = new DateTime(2024, 12, 22, 20, 1, 7, 327, DateTimeKind.Local).AddTicks(4928),
                            RequestedUserId = 6L,
                            Status = "Cancelado"
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 532, DateTimeKind.Local).AddTicks(5483),
                            FacilityId = 3L,
                            MaintenanceType = "Estrutural",
                            Priority = "Alta",
                            ProblemDescription = "Quae ea ea repellat. Facere expedita necessitatibus totam at cupiditate odit. Ut sint reiciendis voluptates est. In rerum aut accusantium.",
                            RequestDate = new DateTime(2023, 4, 20, 6, 50, 13, 46, DateTimeKind.Local).AddTicks(9086),
                            RequestedUserId = 5L,
                            Status = "Cancelado"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.ClubMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EducationOfficer")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Partner")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ClubMember");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "306 Rachael Center, Boscofort, San Marino",
                            DateOfBirth = new DateTime(1981, 1, 1, 11, 17, 40, 59, DateTimeKind.Local).AddTicks(1308),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 468, DateTimeKind.Local).AddTicks(9937),
                            DateOfJoining = new DateTime(2023, 10, 18, 9, 16, 24, 379, DateTimeKind.Local).AddTicks(7739),
                            EducationOfficer = true,
                            Email = "Luciano_Sanford@hotmail.com",
                            FirstName = "Destiny",
                            LastName = "Reichert",
                            Partner = true,
                            PhoneNumber = "730-248-4712 x361"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "476 Dannie Streets, North Scottie, Cocos (Keeling) Islands",
                            DateOfBirth = new DateTime(1987, 5, 22, 12, 33, 49, 313, DateTimeKind.Local).AddTicks(823),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 469, DateTimeKind.Local).AddTicks(484),
                            DateOfJoining = new DateTime(2021, 11, 25, 7, 10, 10, 925, DateTimeKind.Local).AddTicks(8785),
                            EducationOfficer = false,
                            Email = "Louvenia.OKeefe@hotmail.com",
                            FirstName = "Maybell",
                            LastName = "Harvey",
                            Partner = false,
                            PhoneNumber = "(935) 764-9352 x318"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "324 Green Crest, Adrianland, Syrian Arab Republic",
                            DateOfBirth = new DateTime(1986, 11, 29, 0, 58, 43, 60, DateTimeKind.Local).AddTicks(5671),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 469, DateTimeKind.Local).AddTicks(8712),
                            DateOfJoining = new DateTime(2020, 1, 11, 9, 12, 43, 713, DateTimeKind.Local).AddTicks(8329),
                            EducationOfficer = false,
                            Email = "Marjory.Pfannerstill@hotmail.com",
                            FirstName = "Stewart",
                            LastName = "Kozey",
                            Partner = true,
                            PhoneNumber = "1-644-217-0456"
                        },
                        new
                        {
                            Id = 4L,
                            Address = "8655 Elmira Ways, Lake Elisa, Puerto Rico",
                            DateOfBirth = new DateTime(1995, 7, 7, 23, 0, 41, 512, DateTimeKind.Local).AddTicks(2508),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 469, DateTimeKind.Local).AddTicks(8903),
                            DateOfJoining = new DateTime(2023, 11, 29, 0, 46, 24, 308, DateTimeKind.Local).AddTicks(4949),
                            EducationOfficer = false,
                            Email = "Rhiannon.Prohaska74@gmail.com",
                            FirstName = "Efren",
                            LastName = "O'Kon",
                            Partner = false,
                            PhoneNumber = "(508) 590-1215 x04825"
                        },
                        new
                        {
                            Id = 5L,
                            Address = "8065 Ondricka Squares, Wehnermouth, Finland",
                            DateOfBirth = new DateTime(1992, 12, 17, 3, 20, 38, 417, DateTimeKind.Local).AddTicks(471),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 469, DateTimeKind.Local).AddTicks(9074),
                            DateOfJoining = new DateTime(2021, 11, 10, 0, 39, 34, 991, DateTimeKind.Local).AddTicks(4877),
                            EducationOfficer = false,
                            Email = "Horace0@gmail.com",
                            FirstName = "Alden",
                            LastName = "Cole",
                            Partner = false,
                            PhoneNumber = "860.382.3498"
                        },
                        new
                        {
                            Id = 6L,
                            Address = "066 Sean Mill, Crookshaven, Guernsey",
                            DateOfBirth = new DateTime(2003, 3, 9, 2, 24, 16, 338, DateTimeKind.Local).AddTicks(4808),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 469, DateTimeKind.Local).AddTicks(9204),
                            DateOfJoining = new DateTime(2022, 12, 28, 11, 17, 56, 320, DateTimeKind.Local).AddTicks(3929),
                            EducationOfficer = false,
                            Email = "Reina_Moen@gmail.com",
                            FirstName = "Yolanda",
                            LastName = "Beier",
                            Partner = false,
                            PhoneNumber = "539-879-3321 x704"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.MinorClubMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GuardianId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Partner")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GuardianId");

                    b.ToTable("MinorClubMember");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "895 Marvin Hills, South Noreneborough, United States Minor Outlying Islands",
                            DateOfBirth = new DateTime(2010, 3, 9, 13, 0, 35, 770, DateTimeKind.Local).AddTicks(3971),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 470, DateTimeKind.Local).AddTicks(7953),
                            DateOfJoining = new DateTime(2024, 4, 4, 12, 47, 33, 346, DateTimeKind.Local).AddTicks(5884),
                            Email = "Era74@gmail.com",
                            FirstName = "Elinore",
                            GuardianId = 6L,
                            LastName = "Bergnaum",
                            Partner = true,
                            PhoneNumber = "(221) 508-0980"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "93116 Carolina Centers, Kavonport, Saudi Arabia",
                            DateOfBirth = new DateTime(2013, 7, 18, 9, 23, 11, 431, DateTimeKind.Local).AddTicks(6518),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 470, DateTimeKind.Local).AddTicks(9480),
                            DateOfJoining = new DateTime(2023, 3, 27, 8, 59, 36, 934, DateTimeKind.Local).AddTicks(4111),
                            Email = "Orrin_Quigley70@gmail.com",
                            FirstName = "Mozell",
                            GuardianId = 5L,
                            LastName = "Pouros",
                            Partner = false,
                            PhoneNumber = "(548) 414-0314 x53815"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "317 Parker Divide, Ceasarmouth, Brunei Darussalam",
                            DateOfBirth = new DateTime(2013, 7, 28, 9, 16, 6, 260, DateTimeKind.Local).AddTicks(2279),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 470, DateTimeKind.Local).AddTicks(9720),
                            DateOfJoining = new DateTime(2024, 12, 26, 1, 29, 50, 401, DateTimeKind.Local).AddTicks(1643),
                            Email = "Dan_Lueilwitz@gmail.com",
                            FirstName = "Serenity",
                            GuardianId = 4L,
                            LastName = "Jaskolski",
                            Partner = true,
                            PhoneNumber = "(597) 921-2668 x252"
                        },
                        new
                        {
                            Id = 4L,
                            Address = "07402 Bayer Landing, Bartonmouth, Peru",
                            DateOfBirth = new DateTime(2008, 7, 19, 18, 45, 5, 657, DateTimeKind.Local).AddTicks(644),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 470, DateTimeKind.Local).AddTicks(9902),
                            DateOfJoining = new DateTime(2023, 6, 29, 8, 46, 17, 781, DateTimeKind.Local).AddTicks(5386),
                            Email = "Vanessa.Kuphal@hotmail.com",
                            FirstName = "Constance",
                            GuardianId = 5L,
                            LastName = "Flatley",
                            Partner = false,
                            PhoneNumber = "(994) 548-3607"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PlayerCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredFoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerCategoryId");

                    b.ToTable("Player");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfBirth = new DateTime(2004, 12, 8, 15, 6, 32, 148, DateTimeKind.Local).AddTicks(386),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 471, DateTimeKind.Local).AddTicks(8817),
                            FirstName = "Electa",
                            Height = 194,
                            LastName = "Hintz",
                            Nationality = "Norfolk Island",
                            PlayerCategoryId = 4L,
                            Position = "Goalkeeper",
                            PreferredFoot = "Right",
                            Weight = 90
                        },
                        new
                        {
                            Id = 2L,
                            DateOfBirth = new DateTime(1996, 10, 21, 14, 59, 10, 708, DateTimeKind.Local).AddTicks(2520),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 471, DateTimeKind.Local).AddTicks(9982),
                            FirstName = "Kaitlyn",
                            Height = 173,
                            LastName = "Raynor",
                            Nationality = "Jamaica",
                            PlayerCategoryId = 3L,
                            Position = "Goalkeeper",
                            PreferredFoot = "Right",
                            Weight = 92
                        },
                        new
                        {
                            Id = 3L,
                            DateOfBirth = new DateTime(2007, 11, 15, 17, 19, 59, 836, DateTimeKind.Local).AddTicks(1912),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(37),
                            FirstName = "Susie",
                            Height = 186,
                            LastName = "Jenkins",
                            Nationality = "Bolivia",
                            PlayerCategoryId = 4L,
                            Position = "Midfielder",
                            PreferredFoot = "Both",
                            Weight = 87
                        },
                        new
                        {
                            Id = 4L,
                            DateOfBirth = new DateTime(1993, 2, 26, 16, 59, 53, 982, DateTimeKind.Local).AddTicks(1946),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(63),
                            FirstName = "Nicklaus",
                            Height = 182,
                            LastName = "Stamm",
                            Nationality = "Rwanda",
                            PlayerCategoryId = 4L,
                            Position = "Midfielder",
                            PreferredFoot = "Both",
                            Weight = 77
                        },
                        new
                        {
                            Id = 5L,
                            DateOfBirth = new DateTime(2003, 2, 8, 7, 25, 52, 121, DateTimeKind.Local).AddTicks(7996),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(86),
                            FirstName = "Roger",
                            Height = 173,
                            LastName = "Reichel",
                            Nationality = "Algeria",
                            PlayerCategoryId = 5L,
                            Position = "Midfielder",
                            PreferredFoot = "Right",
                            Weight = 63
                        },
                        new
                        {
                            Id = 6L,
                            DateOfBirth = new DateTime(2005, 9, 14, 3, 32, 50, 297, DateTimeKind.Local).AddTicks(4198),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(106),
                            FirstName = "Rudy",
                            Height = 195,
                            LastName = "Jacobs",
                            Nationality = "Benin",
                            PlayerCategoryId = 4L,
                            Position = "Midfielder",
                            PreferredFoot = "Both",
                            Weight = 94
                        },
                        new
                        {
                            Id = 7L,
                            DateOfBirth = new DateTime(2000, 3, 27, 3, 20, 1, 124, DateTimeKind.Local).AddTicks(2687),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(149),
                            FirstName = "Jadon",
                            Height = 193,
                            LastName = "Strosin",
                            Nationality = "Chile",
                            PlayerCategoryId = 3L,
                            Position = "Defender",
                            PreferredFoot = "Both",
                            Weight = 84
                        },
                        new
                        {
                            Id = 8L,
                            DateOfBirth = new DateTime(2006, 7, 25, 18, 33, 58, 182, DateTimeKind.Local).AddTicks(2243),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(171),
                            FirstName = "Eloisa",
                            Height = 170,
                            LastName = "Powlowski",
                            Nationality = "Seychelles",
                            PlayerCategoryId = 3L,
                            Position = "Midfielder",
                            PreferredFoot = "Both",
                            Weight = 74
                        },
                        new
                        {
                            Id = 9L,
                            DateOfBirth = new DateTime(1989, 9, 27, 19, 21, 12, 878, DateTimeKind.Local).AddTicks(71),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(194),
                            FirstName = "Sarah",
                            Height = 179,
                            LastName = "Gerlach",
                            Nationality = "Saint Pierre and Miquelon",
                            PlayerCategoryId = 2L,
                            Position = "Defender",
                            PreferredFoot = "Right",
                            Weight = 93
                        },
                        new
                        {
                            Id = 10L,
                            DateOfBirth = new DateTime(2003, 8, 9, 2, 31, 23, 391, DateTimeKind.Local).AddTicks(9732),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(213),
                            FirstName = "Larry",
                            Height = 191,
                            LastName = "Dibbert",
                            Nationality = "Cote d'Ivoire",
                            PlayerCategoryId = 3L,
                            Position = "Forward",
                            PreferredFoot = "Both",
                            Weight = 75
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlayerCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9733),
                            Description = "Pré-Petizes",
                            Name = "Sub-5"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9745),
                            Description = "Petizes 1º ano",
                            Name = "Sub-6"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9746),
                            Description = "Petizes 2º ano",
                            Name = "Sub-7"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9747),
                            Description = "Traquinas 1º ano",
                            Name = "Sub-8"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9748),
                            Description = "Traquinas 2º ano",
                            Name = "Sub-9"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9749),
                            Description = "Benjamins 1º ano",
                            Name = "Sub-10"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9751),
                            Description = "Benjamins 2º ano",
                            Name = "Sub-11"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9752),
                            Description = "Infantis 1º ano",
                            Name = "Sub-12"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9753),
                            Description = "Infantis 2º ano",
                            Name = "Sub-13"
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9754),
                            Description = "Iniciados 1º ano",
                            Name = "Sub-14"
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9755),
                            Description = "Iniciados 2º ano",
                            Name = "Sub-15"
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9756),
                            Description = "Juvenis 1º ano",
                            Name = "Sub-16"
                        },
                        new
                        {
                            Id = 13L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9757),
                            Description = "Juvenis 2º ano",
                            Name = "Sub-17"
                        },
                        new
                        {
                            Id = 14L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9758),
                            Description = "Juniores 1º ano",
                            Name = "Sub-18"
                        },
                        new
                        {
                            Id = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9759),
                            Description = "Juniores 2º ano",
                            Name = "Sub-19"
                        },
                        new
                        {
                            Id = 16L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(9760),
                            Description = "Seniores",
                            Name = "Seniores"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerContract");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ContractType = "Youth",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 472, DateTimeKind.Local).AddTicks(8530),
                            EndDate = new DateTime(2026, 9, 8, 19, 50, 24, 723, DateTimeKind.Local).AddTicks(522),
                            PlayerId = 9L,
                            Salary = 78476.04m,
                            StartDate = new DateTime(2023, 9, 8, 19, 50, 24, 723, DateTimeKind.Local).AddTicks(522)
                        },
                        new
                        {
                            Id = 2L,
                            ContractType = "Youth",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 473, DateTimeKind.Local).AddTicks(444),
                            EndDate = new DateTime(2027, 5, 5, 6, 5, 25, 921, DateTimeKind.Local).AddTicks(5504),
                            PlayerId = 8L,
                            Salary = 408826.11m,
                            StartDate = new DateTime(2024, 5, 5, 6, 5, 25, 921, DateTimeKind.Local).AddTicks(5504)
                        },
                        new
                        {
                            Id = 3L,
                            ContractType = "Amateur",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 473, DateTimeKind.Local).AddTicks(486),
                            EndDate = new DateTime(2028, 1, 10, 2, 34, 10, 519, DateTimeKind.Local).AddTicks(5498),
                            PlayerId = 10L,
                            Salary = 81609.23m,
                            StartDate = new DateTime(2023, 1, 10, 2, 34, 10, 519, DateTimeKind.Local).AddTicks(5498)
                        },
                        new
                        {
                            Id = 4L,
                            ContractType = "Youth",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 473, DateTimeKind.Local).AddTicks(496),
                            EndDate = new DateTime(2028, 7, 8, 1, 2, 24, 920, DateTimeKind.Local).AddTicks(9365),
                            PlayerId = 4L,
                            Salary = 207078.73m,
                            StartDate = new DateTime(2023, 7, 8, 1, 2, 24, 920, DateTimeKind.Local).AddTicks(9365)
                        },
                        new
                        {
                            Id = 5L,
                            ContractType = "Amateur",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 473, DateTimeKind.Local).AddTicks(504),
                            EndDate = new DateTime(2027, 12, 6, 1, 5, 51, 793, DateTimeKind.Local).AddTicks(5150),
                            PlayerId = 1L,
                            Salary = 465876.17m,
                            StartDate = new DateTime(2024, 12, 6, 1, 5, 51, 793, DateTimeKind.Local).AddTicks(5150)
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerPerformanceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<string>("ClubOpponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerPerformanceHistory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Assists = 12,
                            ClubOpponent = "Cremin and Sons",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 473, DateTimeKind.Local).AddTicks(8938),
                            Goals = 8,
                            MinutesPlayed = 15,
                            PlayerId = 1L,
                            RedCards = 0,
                            Season = "2024/2025",
                            YellowCards = 3
                        },
                        new
                        {
                            Id = 2L,
                            Assists = 11,
                            ClubOpponent = "Bartell, Fadel and Fritsch",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 473, DateTimeKind.Local).AddTicks(9936),
                            Goals = 17,
                            MinutesPlayed = 52,
                            PlayerId = 5L,
                            RedCards = 0,
                            Season = "2024/2025",
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 3L,
                            Assists = 4,
                            ClubOpponent = "Bednar Group",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 474, DateTimeKind.Local).AddTicks(36),
                            Goals = 16,
                            MinutesPlayed = 23,
                            PlayerId = 2L,
                            RedCards = 0,
                            Season = "2024/2025",
                            YellowCards = 3
                        },
                        new
                        {
                            Id = 4L,
                            Assists = 15,
                            ClubOpponent = "Johns, Toy and Wisoky",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 474, DateTimeKind.Local).AddTicks(112),
                            Goals = 0,
                            MinutesPlayed = 34,
                            PlayerId = 8L,
                            RedCards = 1,
                            Season = "2024/2025",
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 5L,
                            Assists = 4,
                            ClubOpponent = "Connelly, Grady and Bogan",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 474, DateTimeKind.Local).AddTicks(180),
                            Goals = 19,
                            MinutesPlayed = 25,
                            PlayerId = 3L,
                            RedCards = 1,
                            Season = "2024/2025",
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 6L,
                            Assists = 7,
                            ClubOpponent = "Barton, Ondricka and Hand",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 474, DateTimeKind.Local).AddTicks(255),
                            Goals = 0,
                            MinutesPlayed = 26,
                            PlayerId = 9L,
                            RedCards = 1,
                            Season = "2024/2025",
                            YellowCards = 5
                        },
                        new
                        {
                            Id = 7L,
                            Assists = 15,
                            ClubOpponent = "Bode Group",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 474, DateTimeKind.Local).AddTicks(333),
                            Goals = 9,
                            MinutesPlayed = 57,
                            PlayerId = 1L,
                            RedCards = 1,
                            Season = "2024/2025",
                            YellowCards = 4
                        },
                        new
                        {
                            Id = 8L,
                            Assists = 13,
                            ClubOpponent = "Bechtelar, Hammes and Williamson",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 474, DateTimeKind.Local).AddTicks(377),
                            Goals = 15,
                            MinutesPlayed = 47,
                            PlayerId = 2L,
                            RedCards = 1,
                            Season = "2024/2025",
                            YellowCards = 2
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerResponsible", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrimaryContact")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerResponsible");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 475, DateTimeKind.Local).AddTicks(9330),
                            IsPrimaryContact = true,
                            MemberId = 3L,
                            PlayerId = 1L,
                            Relationship = "Relative"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 476, DateTimeKind.Local).AddTicks(7530),
                            IsPrimaryContact = false,
                            MemberId = 1L,
                            PlayerId = 1L,
                            Relationship = "Guardian"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 477, DateTimeKind.Local).AddTicks(5860),
                            IsPrimaryContact = false,
                            MemberId = 3L,
                            PlayerId = 2L,
                            Relationship = "Guardian"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 478, DateTimeKind.Local).AddTicks(4010),
                            IsPrimaryContact = true,
                            MemberId = 4L,
                            PlayerId = 2L,
                            Relationship = "Coach"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 479, DateTimeKind.Local).AddTicks(2121),
                            IsPrimaryContact = true,
                            MemberId = 1L,
                            PlayerId = 3L,
                            Relationship = "Coach"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 479, DateTimeKind.Local).AddTicks(9987),
                            IsPrimaryContact = false,
                            MemberId = 5L,
                            PlayerId = 3L,
                            Relationship = "Relative"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 480, DateTimeKind.Local).AddTicks(7950),
                            IsPrimaryContact = true,
                            MemberId = 5L,
                            PlayerId = 4L,
                            Relationship = "Parent"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 481, DateTimeKind.Local).AddTicks(5868),
                            IsPrimaryContact = true,
                            MemberId = 6L,
                            PlayerId = 4L,
                            Relationship = "Coach"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 482, DateTimeKind.Local).AddTicks(4364),
                            IsPrimaryContact = true,
                            MemberId = 5L,
                            PlayerId = 5L,
                            Relationship = "Relative"
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 483, DateTimeKind.Local).AddTicks(3019),
                            IsPrimaryContact = false,
                            MemberId = 4L,
                            PlayerId = 5L,
                            Relationship = "Guardian"
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 484, DateTimeKind.Local).AddTicks(1078),
                            IsPrimaryContact = true,
                            MemberId = 4L,
                            PlayerId = 6L,
                            Relationship = "Parent"
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 484, DateTimeKind.Local).AddTicks(8964),
                            IsPrimaryContact = false,
                            MemberId = 5L,
                            PlayerId = 6L,
                            Relationship = "Relative"
                        },
                        new
                        {
                            Id = 13L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 485, DateTimeKind.Local).AddTicks(7034),
                            IsPrimaryContact = false,
                            MemberId = 2L,
                            PlayerId = 7L,
                            Relationship = "Coach"
                        },
                        new
                        {
                            Id = 14L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 486, DateTimeKind.Local).AddTicks(4991),
                            IsPrimaryContact = true,
                            MemberId = 5L,
                            PlayerId = 7L,
                            Relationship = "Coach"
                        },
                        new
                        {
                            Id = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 487, DateTimeKind.Local).AddTicks(3054),
                            IsPrimaryContact = true,
                            MemberId = 1L,
                            PlayerId = 8L,
                            Relationship = "Relative"
                        },
                        new
                        {
                            Id = 16L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 488, DateTimeKind.Local).AddTicks(1148),
                            IsPrimaryContact = false,
                            MemberId = 2L,
                            PlayerId = 8L,
                            Relationship = "Guardian"
                        },
                        new
                        {
                            Id = 17L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 488, DateTimeKind.Local).AddTicks(9069),
                            IsPrimaryContact = true,
                            MemberId = 3L,
                            PlayerId = 9L,
                            Relationship = "Relative"
                        },
                        new
                        {
                            Id = 18L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 489, DateTimeKind.Local).AddTicks(6998),
                            IsPrimaryContact = false,
                            MemberId = 2L,
                            PlayerId = 9L,
                            Relationship = "Parent"
                        },
                        new
                        {
                            Id = 19L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 490, DateTimeKind.Local).AddTicks(4978),
                            IsPrimaryContact = false,
                            MemberId = 3L,
                            PlayerId = 10L,
                            Relationship = "Parent"
                        },
                        new
                        {
                            Id = 20L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 491, DateTimeKind.Local).AddTicks(2874),
                            IsPrimaryContact = false,
                            MemberId = 2L,
                            PlayerId = 10L,
                            Relationship = "Guardian"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromClub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ToClub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransferFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerTransfer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 474, DateTimeKind.Local).AddTicks(8785),
                            FromClub = "Friesen LLC",
                            PlayerId = 4L,
                            ToClub = "Cruickshank, Wisoky and Leuschke",
                            TransferDate = new DateTime(2024, 1, 18, 11, 17, 35, 848, DateTimeKind.Local).AddTicks(6692),
                            TransferFee = 8546081.34m
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 475, DateTimeKind.Local).AddTicks(541),
                            FromClub = "Gibson, Volkman and Harvey",
                            PlayerId = 2L,
                            ToClub = "Dach - Wiegand",
                            TransferDate = new DateTime(2024, 3, 17, 8, 3, 14, 254, DateTimeKind.Local).AddTicks(6792),
                            TransferFee = 3093475.66m
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 475, DateTimeKind.Local).AddTicks(768),
                            FromClub = "Adams - Hamill",
                            PlayerId = 8L,
                            ToClub = "Bruen - Bergnaum",
                            TransferDate = new DateTime(2024, 3, 15, 11, 55, 41, 269, DateTimeKind.Local).AddTicks(6953),
                            TransferFee = 6098127.41m
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Female")
                        .HasColumnType("bit");

                    b.Property<bool>("Male")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TeamCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("TeamCategoryId");

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClubId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 496, DateTimeKind.Local).AddTicks(8723),
                            Female = false,
                            Male = true,
                            Name = "Beauty, Outdoors & Health migration",
                            TeamCategoryId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ClubId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 497, DateTimeKind.Local).AddTicks(7014),
                            Female = false,
                            Male = true,
                            Name = "Electronics Technician",
                            TeamCategoryId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            ClubId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 498, DateTimeKind.Local).AddTicks(6864),
                            Female = true,
                            Male = false,
                            Name = "Clothing invoice",
                            TeamCategoryId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            ClubId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 499, DateTimeKind.Local).AddTicks(6460),
                            Female = true,
                            Male = false,
                            Name = "Jewelery & Industrial Dam",
                            TeamCategoryId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            ClubId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 500, DateTimeKind.Local).AddTicks(5404),
                            Female = false,
                            Male = true,
                            Name = "Industrial & Tools cross-platform",
                            TeamCategoryId = 9L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6443),
                            Description = "Pré-Petizes",
                            Name = "Pré-Petizes"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6446),
                            Description = "Petizes",
                            Name = "Petizes"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6448),
                            Description = "Traquinas",
                            Name = "Traquinas"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6449),
                            Description = "Benjamins",
                            Name = "Benjamins"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6450),
                            Description = "Infantis",
                            Name = "Infantis"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6451),
                            Description = "Iniciados",
                            Name = "Iniciados"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6452),
                            Description = "Juvenis",
                            Name = "Juvenis"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6453),
                            Description = "Juniores",
                            Name = "Juniores"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 467, DateTimeKind.Local).AddTicks(6454),
                            Description = "Seniores",
                            Name = "Seniores"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamCoach", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadCoach")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamCoach");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 501, DateTimeKind.Local).AddTicks(4378),
                            IsHeadCoach = false,
                            TeamId = 1L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 502, DateTimeKind.Local).AddTicks(2344),
                            IsHeadCoach = true,
                            TeamId = 1L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 503, DateTimeKind.Local).AddTicks(542),
                            IsHeadCoach = true,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 503, DateTimeKind.Local).AddTicks(8425),
                            IsHeadCoach = false,
                            TeamId = 2L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 504, DateTimeKind.Local).AddTicks(6355),
                            IsHeadCoach = false,
                            TeamId = 3L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 505, DateTimeKind.Local).AddTicks(4246),
                            IsHeadCoach = false,
                            TeamId = 3L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 506, DateTimeKind.Local).AddTicks(2162),
                            IsHeadCoach = true,
                            TeamId = 4L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 507, DateTimeKind.Local).AddTicks(38),
                            IsHeadCoach = false,
                            TeamId = 4L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 507, DateTimeKind.Local).AddTicks(7982),
                            IsHeadCoach = false,
                            TeamId = 5L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 508, DateTimeKind.Local).AddTicks(6064),
                            IsHeadCoach = true,
                            TeamId = 5L,
                            UserId = 4L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 509, DateTimeKind.Local).AddTicks(4303),
                            PlayerId = 5L,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 510, DateTimeKind.Local).AddTicks(2211),
                            PlayerId = 3L,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 510, DateTimeKind.Local).AddTicks(9951),
                            PlayerId = 10L,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 511, DateTimeKind.Local).AddTicks(7740),
                            PlayerId = 6L,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 512, DateTimeKind.Local).AddTicks(5560),
                            PlayerId = 4L,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 513, DateTimeKind.Local).AddTicks(3496),
                            PlayerId = 2L,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 514, DateTimeKind.Local).AddTicks(1574),
                            PlayerId = 1L,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 514, DateTimeKind.Local).AddTicks(9637),
                            PlayerId = 5L,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 515, DateTimeKind.Local).AddTicks(7539),
                            PlayerId = 9L,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 516, DateTimeKind.Local).AddTicks(5945),
                            PlayerId = 3L,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 517, DateTimeKind.Local).AddTicks(3974),
                            PlayerId = 8L,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 518, DateTimeKind.Local).AddTicks(1815),
                            PlayerId = 3L,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 13L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 518, DateTimeKind.Local).AddTicks(9492),
                            PlayerId = 2L,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 14L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 519, DateTimeKind.Local).AddTicks(7316),
                            PlayerId = 4L,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 15L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 520, DateTimeKind.Local).AddTicks(5323),
                            PlayerId = 1L,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 521, DateTimeKind.Local).AddTicks(3182),
                            PlayerId = 10L,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 522, DateTimeKind.Local).AddTicks(936),
                            PlayerId = 2L,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 522, DateTimeKind.Local).AddTicks(8657),
                            PlayerId = 7L,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 19L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 523, DateTimeKind.Local).AddTicks(6738),
                            PlayerId = 9L,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 20L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 524, DateTimeKind.Local).AddTicks(4636),
                            PlayerId = 4L,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 21L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 525, DateTimeKind.Local).AddTicks(2445),
                            PlayerId = 4L,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 22L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 526, DateTimeKind.Local).AddTicks(139),
                            PlayerId = 8L,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 23L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 526, DateTimeKind.Local).AddTicks(8034),
                            PlayerId = 9L,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 24L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 527, DateTimeKind.Local).AddTicks(5835),
                            PlayerId = 7L,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 25L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 528, DateTimeKind.Local).AddTicks(3697),
                            PlayerId = 10L,
                            TeamId = 5L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.UserClubMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClubMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClubMemberId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserClubMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClubMemberId = 1L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 492, DateTimeKind.Local).AddTicks(979),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ClubMemberId = 2L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 492, DateTimeKind.Local).AddTicks(8815),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            ClubMemberId = 3L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 493, DateTimeKind.Local).AddTicks(6821),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            ClubMemberId = 4L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 494, DateTimeKind.Local).AddTicks(4699),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            ClubMemberId = 5L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 495, DateTimeKind.Local).AddTicks(2685),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            ClubMemberId = 6L,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 496, DateTimeKind.Local).AddTicks(401),
                            UserId = 6L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompetitionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompetitionType = "League",
                            Date = new DateTime(2025, 4, 27, 9, 26, 45, 384, DateTimeKind.Local).AddTicks(3626),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(482),
                            IsCanceled = true,
                            Location = "Welchborough",
                            Opponent = "Jewelery & Industrial Dam",
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 2L,
                            CompetitionType = "Friendly",
                            Date = new DateTime(2025, 9, 24, 17, 5, 54, 228, DateTimeKind.Local).AddTicks(4425),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2154),
                            IsCanceled = false,
                            Location = "Wunschbury",
                            Opponent = "Beauty, Outdoors & Health migration",
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 3L,
                            CompetitionType = "League",
                            Date = new DateTime(2025, 4, 16, 7, 11, 28, 293, DateTimeKind.Local).AddTicks(6319),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2257),
                            IsCanceled = false,
                            Location = "Robertschester",
                            Opponent = "Clothing invoice",
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CompetitionType = "League",
                            Date = new DateTime(2025, 12, 1, 12, 12, 49, 639, DateTimeKind.Local).AddTicks(2106),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2298),
                            IsCanceled = true,
                            Location = "Lake Craigview",
                            Opponent = "Clothing invoice",
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CompetitionType = "Friendly",
                            Date = new DateTime(2025, 10, 16, 23, 45, 59, 508, DateTimeKind.Local).AddTicks(7266),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2381),
                            IsCanceled = true,
                            Location = "North Alec",
                            Opponent = "Beauty, Outdoors & Health migration",
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            CompetitionType = "Friendly",
                            Date = new DateTime(2025, 8, 7, 4, 42, 21, 710, DateTimeKind.Local).AddTicks(4724),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2409),
                            IsCanceled = false,
                            Location = "Lake Kenyatta",
                            Opponent = "Clothing invoice",
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CompetitionType = "Friendly",
                            Date = new DateTime(2025, 11, 7, 9, 7, 40, 441, DateTimeKind.Local).AddTicks(1200),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2458),
                            IsCanceled = false,
                            Location = "Bergehaven",
                            Opponent = "Jewelery & Industrial Dam",
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 8L,
                            CompetitionType = "Friendly",
                            Date = new DateTime(2025, 12, 14, 20, 11, 49, 684, DateTimeKind.Local).AddTicks(1986),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2483),
                            IsCanceled = true,
                            Location = "Karliestad",
                            Opponent = "Clothing invoice",
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            CompetitionType = "Friendly",
                            Date = new DateTime(2025, 7, 7, 14, 3, 38, 908, DateTimeKind.Local).AddTicks(9214),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2509),
                            IsCanceled = false,
                            Location = "Lake Kamillemouth",
                            Opponent = "Electronics Technician",
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 10L,
                            CompetitionType = "Cup",
                            Date = new DateTime(2025, 7, 16, 3, 45, 14, 13, DateTimeKind.Local).AddTicks(7839),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 537, DateTimeKind.Local).AddTicks(2561),
                            IsCanceled = true,
                            Location = "New Elliott",
                            Opponent = "Beauty, Outdoors & Health migration",
                            TeamId = 5L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.MatchStatistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("Substitutions")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchStatistics");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1064),
                            Goals = 0,
                            MatchId = 7L,
                            MinutesPlayed = 74,
                            PlayerId = 1L,
                            RedCards = 1,
                            Substitutions = 0,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 2L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1256),
                            Goals = 2,
                            MatchId = 5L,
                            MinutesPlayed = 83,
                            PlayerId = 5L,
                            RedCards = 0,
                            Substitutions = 0,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 3L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1269),
                            Goals = 3,
                            MatchId = 3L,
                            MinutesPlayed = 87,
                            PlayerId = 5L,
                            RedCards = 1,
                            Substitutions = 2,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 4L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1277),
                            Goals = 1,
                            MatchId = 4L,
                            MinutesPlayed = 48,
                            PlayerId = 7L,
                            RedCards = 0,
                            Substitutions = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 5L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1286),
                            Goals = 3,
                            MatchId = 4L,
                            MinutesPlayed = 66,
                            PlayerId = 4L,
                            RedCards = 0,
                            Substitutions = 2,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 6L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1293),
                            Goals = 0,
                            MatchId = 7L,
                            MinutesPlayed = 70,
                            PlayerId = 5L,
                            RedCards = 1,
                            Substitutions = 0,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 7L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1312),
                            Goals = 2,
                            MatchId = 6L,
                            MinutesPlayed = 84,
                            PlayerId = 8L,
                            RedCards = 1,
                            Substitutions = 3,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 8L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1319),
                            Goals = 3,
                            MatchId = 1L,
                            MinutesPlayed = 65,
                            PlayerId = 2L,
                            RedCards = 0,
                            Substitutions = 0,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 9L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1325),
                            Goals = 1,
                            MatchId = 7L,
                            MinutesPlayed = 64,
                            PlayerId = 8L,
                            RedCards = 0,
                            Substitutions = 2,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 10L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1331),
                            Goals = 3,
                            MatchId = 8L,
                            MinutesPlayed = 50,
                            PlayerId = 5L,
                            RedCards = 1,
                            Substitutions = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 11L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1337),
                            Goals = 2,
                            MatchId = 9L,
                            MinutesPlayed = 52,
                            PlayerId = 8L,
                            RedCards = 0,
                            Substitutions = 1,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 12L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1343),
                            Goals = 3,
                            MatchId = 8L,
                            MinutesPlayed = 60,
                            PlayerId = 3L,
                            RedCards = 0,
                            Substitutions = 2,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 13L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1351),
                            Goals = 0,
                            MatchId = 9L,
                            MinutesPlayed = 78,
                            PlayerId = 6L,
                            RedCards = 1,
                            Substitutions = 3,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 14L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1357),
                            Goals = 3,
                            MatchId = 8L,
                            MinutesPlayed = 86,
                            PlayerId = 1L,
                            RedCards = 1,
                            Substitutions = 0,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 15L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1363),
                            Goals = 0,
                            MatchId = 2L,
                            MinutesPlayed = 54,
                            PlayerId = 10L,
                            RedCards = 1,
                            Substitutions = 1,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 16L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1369),
                            Goals = 0,
                            MatchId = 10L,
                            MinutesPlayed = 85,
                            PlayerId = 10L,
                            RedCards = 0,
                            Substitutions = 1,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 17L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1375),
                            Goals = 2,
                            MatchId = 9L,
                            MinutesPlayed = 53,
                            PlayerId = 5L,
                            RedCards = 0,
                            Substitutions = 1,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 18L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1382),
                            Goals = 3,
                            MatchId = 8L,
                            MinutesPlayed = 53,
                            PlayerId = 10L,
                            RedCards = 1,
                            Substitutions = 1,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 19L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1388),
                            Goals = 0,
                            MatchId = 5L,
                            MinutesPlayed = 49,
                            PlayerId = 4L,
                            RedCards = 1,
                            Substitutions = 0,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 20L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1394),
                            Goals = 3,
                            MatchId = 8L,
                            MinutesPlayed = 75,
                            PlayerId = 8L,
                            RedCards = 1,
                            Substitutions = 1,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 21L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1400),
                            Goals = 3,
                            MatchId = 1L,
                            MinutesPlayed = 51,
                            PlayerId = 4L,
                            RedCards = 0,
                            Substitutions = 3,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 22L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1406),
                            Goals = 3,
                            MatchId = 9L,
                            MinutesPlayed = 45,
                            PlayerId = 3L,
                            RedCards = 0,
                            Substitutions = 3,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 23L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1412),
                            Goals = 1,
                            MatchId = 9L,
                            MinutesPlayed = 50,
                            PlayerId = 8L,
                            RedCards = 0,
                            Substitutions = 0,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 24L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1419),
                            Goals = 2,
                            MatchId = 2L,
                            MinutesPlayed = 48,
                            PlayerId = 8L,
                            RedCards = 1,
                            Substitutions = 2,
                            YellowCards = 2
                        },
                        new
                        {
                            Id = 25L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1425),
                            Goals = 2,
                            MatchId = 5L,
                            MinutesPlayed = 47,
                            PlayerId = 6L,
                            RedCards = 0,
                            Substitutions = 3,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 26L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1431),
                            Goals = 3,
                            MatchId = 9L,
                            MinutesPlayed = 82,
                            PlayerId = 9L,
                            RedCards = 1,
                            Substitutions = 0,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 27L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1437),
                            Goals = 1,
                            MatchId = 3L,
                            MinutesPlayed = 68,
                            PlayerId = 8L,
                            RedCards = 1,
                            Substitutions = 0,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 28L,
                            Assists = 1,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1443),
                            Goals = 3,
                            MatchId = 10L,
                            MinutesPlayed = 84,
                            PlayerId = 3L,
                            RedCards = 1,
                            Substitutions = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 29L,
                            Assists = 0,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1449),
                            Goals = 0,
                            MatchId = 8L,
                            MinutesPlayed = 66,
                            PlayerId = 3L,
                            RedCards = 1,
                            Substitutions = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 30L,
                            Assists = 2,
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(1455),
                            Goals = 1,
                            MatchId = 6L,
                            MinutesPlayed = 55,
                            PlayerId = 5L,
                            RedCards = 1,
                            Substitutions = 0,
                            YellowCards = 1
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AbsenceReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainingSessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("TrainingAttendances");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AbsenceReason = "Cumque harum voluptatem est quo minus culpa quo.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(672),
                            IsPresent = true,
                            PlayerId = 8L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AbsenceReason = "Iste cum at est et omnis.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(1909),
                            IsPresent = false,
                            PlayerId = 4L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 3L,
                            AbsenceReason = "A unde veritatis officia occaecati labore officiis consequuntur blanditiis.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(1965),
                            IsPresent = true,
                            PlayerId = 3L,
                            TrainingSessionId = 4L
                        },
                        new
                        {
                            Id = 4L,
                            AbsenceReason = "Laborum molestiae cumque et consequatur nostrum omnis.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(1990),
                            IsPresent = false,
                            PlayerId = 5L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            AbsenceReason = "Omnis nisi iste odit quas voluptatem.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2012),
                            IsPresent = false,
                            PlayerId = 2L,
                            TrainingSessionId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            AbsenceReason = "Quaerat ea tempore impedit aut reiciendis asperiores rerum.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2029),
                            IsPresent = false,
                            PlayerId = 2L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            AbsenceReason = "Voluptate dolorem deleniti perspiciatis voluptas.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2049),
                            IsPresent = true,
                            PlayerId = 3L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            AbsenceReason = "Consequatur illo eum in.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2103),
                            IsPresent = true,
                            PlayerId = 2L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            AbsenceReason = "Illo aut voluptas cupiditate et iste blanditiis.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2117),
                            IsPresent = true,
                            PlayerId = 10L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            AbsenceReason = "Voluptas voluptatem laborum necessitatibus quia.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2135),
                            IsPresent = false,
                            PlayerId = 6L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            AbsenceReason = "Impedit voluptas id et ea id animi.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2150),
                            IsPresent = false,
                            PlayerId = 9L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 12L,
                            AbsenceReason = "Quasi porro sed est totam maiores ipsam est.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2167),
                            IsPresent = false,
                            PlayerId = 5L,
                            TrainingSessionId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            AbsenceReason = "Non quo ea.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2186),
                            IsPresent = true,
                            PlayerId = 6L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 14L,
                            AbsenceReason = "Quis omnis similique ut incidunt illo enim explicabo fugit.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2197),
                            IsPresent = false,
                            PlayerId = 7L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 15L,
                            AbsenceReason = "Dolorem culpa quasi laborum.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2218),
                            IsPresent = true,
                            PlayerId = 5L,
                            TrainingSessionId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            AbsenceReason = "Tenetur et itaque aut ut rerum.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2240),
                            IsPresent = false,
                            PlayerId = 5L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 17L,
                            AbsenceReason = "Eius nemo autem corporis accusamus culpa.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2256),
                            IsPresent = true,
                            PlayerId = 5L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 18L,
                            AbsenceReason = "Qui quia quam excepturi consequatur ratione.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2272),
                            IsPresent = false,
                            PlayerId = 2L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 19L,
                            AbsenceReason = "Necessitatibus ut quaerat ipsam.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2287),
                            IsPresent = false,
                            PlayerId = 8L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 20L,
                            AbsenceReason = "Corporis blanditiis eius quia tenetur.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2300),
                            IsPresent = false,
                            PlayerId = 6L,
                            TrainingSessionId = 4L
                        },
                        new
                        {
                            Id = 21L,
                            AbsenceReason = "Est odit et cupiditate.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2314),
                            IsPresent = false,
                            PlayerId = 2L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 22L,
                            AbsenceReason = "Reiciendis libero eum assumenda eos necessitatibus doloribus autem.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2326),
                            IsPresent = true,
                            PlayerId = 2L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 23L,
                            AbsenceReason = "Perferendis atque dolore.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2347),
                            IsPresent = false,
                            PlayerId = 1L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 24L,
                            AbsenceReason = "Modi qui voluptates quos excepturi nisi voluptatum.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2390),
                            IsPresent = true,
                            PlayerId = 10L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 25L,
                            AbsenceReason = "Tempora rerum et enim autem veritatis consequuntur.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2408),
                            IsPresent = true,
                            PlayerId = 10L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 26L,
                            AbsenceReason = "Repellat et et sequi quis.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2426),
                            IsPresent = true,
                            PlayerId = 2L,
                            TrainingSessionId = 4L
                        },
                        new
                        {
                            Id = 27L,
                            AbsenceReason = "Veritatis perspiciatis aut molestiae incidunt.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2440),
                            IsPresent = true,
                            PlayerId = 5L,
                            TrainingSessionId = 3L
                        },
                        new
                        {
                            Id = 28L,
                            AbsenceReason = "Est sed consequuntur illum voluptas nihil.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2454),
                            IsPresent = true,
                            PlayerId = 10L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 29L,
                            AbsenceReason = "Tenetur temporibus consequatur nihil velit ex ullam.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2470),
                            IsPresent = true,
                            PlayerId = 7L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 30L,
                            AbsenceReason = "Eum minus harum sit vel iusto sed vitae cumque sed.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2486),
                            IsPresent = true,
                            PlayerId = 3L,
                            TrainingSessionId = 3L
                        },
                        new
                        {
                            Id = 31L,
                            AbsenceReason = "Minus qui et esse natus.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2508),
                            IsPresent = true,
                            PlayerId = 10L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 32L,
                            AbsenceReason = "Voluptate a dignissimos sed possimus voluptas ea aut.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2541),
                            IsPresent = true,
                            PlayerId = 5L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 33L,
                            AbsenceReason = "Eveniet laudantium nesciunt est sit.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2559),
                            IsPresent = true,
                            PlayerId = 4L,
                            TrainingSessionId = 4L
                        },
                        new
                        {
                            Id = 34L,
                            AbsenceReason = "Itaque doloremque id.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2574),
                            IsPresent = true,
                            PlayerId = 4L,
                            TrainingSessionId = 4L
                        },
                        new
                        {
                            Id = 35L,
                            AbsenceReason = "Vel totam repellendus praesentium id unde.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2586),
                            IsPresent = true,
                            PlayerId = 5L,
                            TrainingSessionId = 3L
                        },
                        new
                        {
                            Id = 36L,
                            AbsenceReason = "Enim qui voluptatem et ut.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2602),
                            IsPresent = true,
                            PlayerId = 8L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 37L,
                            AbsenceReason = "Dolore dolorem consequatur doloribus.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2617),
                            IsPresent = false,
                            PlayerId = 4L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 38L,
                            AbsenceReason = "Quia dolorem et.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2629),
                            IsPresent = true,
                            PlayerId = 7L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 39L,
                            AbsenceReason = "Nam aliquam sed placeat.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2641),
                            IsPresent = true,
                            PlayerId = 3L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 40L,
                            AbsenceReason = "Repudiandae perspiciatis sit itaque repudiandae similique cupiditate veniam aspernatur quia.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2654),
                            IsPresent = true,
                            PlayerId = 1L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 41L,
                            AbsenceReason = "Corrupti quasi perspiciatis doloremque voluptas.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2691),
                            IsPresent = false,
                            PlayerId = 8L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 42L,
                            AbsenceReason = "Adipisci voluptatibus non ut voluptatem nam.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2707),
                            IsPresent = true,
                            PlayerId = 4L,
                            TrainingSessionId = 3L
                        },
                        new
                        {
                            Id = 43L,
                            AbsenceReason = "Beatae asperiores placeat reprehenderit dolores velit aspernatur sunt.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2722),
                            IsPresent = true,
                            PlayerId = 6L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 44L,
                            AbsenceReason = "Cum nihil porro accusantium.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2744),
                            IsPresent = true,
                            PlayerId = 7L,
                            TrainingSessionId = 5L
                        },
                        new
                        {
                            Id = 45L,
                            AbsenceReason = "Numquam numquam doloremque.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2758),
                            IsPresent = false,
                            PlayerId = 7L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 46L,
                            AbsenceReason = "Qui accusamus occaecati expedita quia numquam corrupti aut eos voluptate.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2769),
                            IsPresent = true,
                            PlayerId = 2L,
                            TrainingSessionId = 4L
                        },
                        new
                        {
                            Id = 47L,
                            AbsenceReason = "Enim fugit aut quisquam officiis architecto quia.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2789),
                            IsPresent = false,
                            PlayerId = 9L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 48L,
                            AbsenceReason = "Consectetur dolorem et ut.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2820),
                            IsPresent = false,
                            PlayerId = 7L,
                            TrainingSessionId = 1L
                        },
                        new
                        {
                            Id = 49L,
                            AbsenceReason = "Minima cum non delectus et id natus delectus magnam.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2833),
                            IsPresent = true,
                            PlayerId = 1L,
                            TrainingSessionId = 2L
                        },
                        new
                        {
                            Id = 50L,
                            AbsenceReason = "Rerum non animi itaque.",
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 540, DateTimeKind.Local).AddTicks(2851),
                            IsPresent = false,
                            PlayerId = 8L,
                            TrainingSessionId = 2L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objectives")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TrainingSessions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Date = new DateTime(2025, 5, 20, 11, 7, 32, 252, DateTimeKind.Local).AddTicks(4112),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 538, DateTimeKind.Local).AddTicks(9739),
                            Description = "Nostrum impedit ducimus sed. Voluptatem sed quidem eos. Rerum quod possimus. Cupiditate error est deserunt eos rerum. Molestiae ea non explicabo non officia pariatur autem. Iste in et nihil molestiae quod perferendis.",
                            Duration = 106,
                            IsCanceled = true,
                            Location = "Port Donnellside",
                            Name = "bus",
                            Objectives = "Eos aut atque distinctio est.",
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 2L,
                            Date = new DateTime(2025, 7, 27, 3, 59, 6, 907, DateTimeKind.Local).AddTicks(4346),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 539, DateTimeKind.Local).AddTicks(1932),
                            Description = "Et dicta error et esse molestiae. Est illum sed non quia. Et quidem veritatis voluptatibus ex. Itaque consectetur officia est quia commodi neque odit. Est est et.",
                            Duration = 83,
                            IsCanceled = true,
                            Location = "East Chaya",
                            Name = "application",
                            Objectives = "Nesciunt aut sit hic voluptate magni minus nostrum et omnis.",
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 3L,
                            Date = new DateTime(2025, 7, 26, 4, 4, 29, 819, DateTimeKind.Local).AddTicks(714),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 539, DateTimeKind.Local).AddTicks(2158),
                            Description = "Dolorem exercitationem blanditiis sunt possimus. Rerum dolorem aut quia quas rerum sunt. Id omnis nihil.",
                            Duration = 82,
                            IsCanceled = true,
                            Location = "Hettingermouth",
                            Name = "interface",
                            Objectives = "Numquam pariatur id est quis impedit ut.",
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 4L,
                            Date = new DateTime(2025, 2, 25, 11, 26, 32, 90, DateTimeKind.Local).AddTicks(8228),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 539, DateTimeKind.Local).AddTicks(2240),
                            Description = "Quia voluptas tenetur. Nihil eaque sit nulla. Excepturi vitae tempora fugiat molestias optio temporibus illo quibusdam vero. Libero omnis corporis. Ad sequi occaecati sunt mollitia harum. Sequi debitis provident non ullam quas nobis molestiae.",
                            Duration = 69,
                            IsCanceled = false,
                            Location = "Lake Audie",
                            Name = "microchip",
                            Objectives = "Voluptas hic itaque sit saepe consequatur magnam deleniti rerum.",
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            Date = new DateTime(2025, 9, 16, 17, 13, 49, 188, DateTimeKind.Local).AddTicks(3194),
                            DateOfCreation = new DateTime(2024, 12, 30, 13, 55, 35, 539, DateTimeKind.Local).AddTicks(2401),
                            Description = "Enim vel itaque eos est qui quaerat omnis adipisci. Aliquam repellendus quasi consequatur doloribus possimus necessitatibus ipsa est. Rerum magni ipsum velit beatae accusamus aperiam occaecati quo.",
                            Duration = 111,
                            IsCanceled = false,
                            Location = "Randiville",
                            Name = "hard drive",
                            Objectives = "Aperiam odio aut modi minima.",
                            TeamId = 2L
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Entity", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.ClubMember", "UserClubMember")
                        .WithMany()
                        .HasForeignKey("ClubMemberId");

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithOne("Entity")
                        .HasForeignKey("ClubManager.Domain.Entities.Financial.Entity", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Player");

                    b.Navigation("UserClubMember");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Expense", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Financial.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Financial.Entity", "Entity")
                        .WithMany("Expenses")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "User")
                        .WithOne("Expense")
                        .HasForeignKey("ClubManager.Domain.Entities.Financial.Expense", "ResponsibleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("ExpenseCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Revenue", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Financial.RevenueCategory", "RevenueCategory")
                        .WithMany("Revenues")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Financial.Entity", "Entity")
                        .WithMany("Revenues")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "User")
                        .WithOne("Revenue")
                        .HasForeignKey("ClubManager.Domain.Entities.Financial.Revenue", "ResponsibleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("RevenueCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Identity.Institution", "Institution")
                        .WithMany("User")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.UserPermissions", "UserPermission")
                        .WithOne("Users")
                        .HasForeignKey("ClubManager.Domain.Entities.Identity.User", "UserPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.UserRoles", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("UserPermission");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.Facility", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Infrastructures.FacilityCategory", "FacilityCategory")
                        .WithMany("Facility")
                        .HasForeignKey("FacilityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityCategory");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.FacilityReservation", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Infrastructures.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "ReservedUser")
                        .WithMany("FacilityReservation")
                        .HasForeignKey("ReservedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("ReservedUser");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.MaintenanceHistory", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Infrastructures.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "RequestUser")
                        .WithMany("MaintenanceHistory")
                        .HasForeignKey("RequestUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("RequestUser");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.MaintenanceRequest", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Infrastructures.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "RequestedUser")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("RequestedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("RequestedUser");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.MinorClubMember", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.ClubMember", "Guardian")
                        .WithMany("MinorClubMembers")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Player", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.PlayerCategory", "Category")
                        .WithMany("Player")
                        .HasForeignKey("PlayerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerContract", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("PlayerContracts")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerPerformanceHistory", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("PlayerPerformanceHistories")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerResponsible", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.ClubMember", "Member")
                        .WithMany("PlayerResponsibles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("PlayerResponsibles")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerTransfer", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("PlayerTransfers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Team", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Identity.Institution", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.TeamCategory", "TeamCategories")
                        .WithMany("Team")
                        .HasForeignKey("TeamCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("TeamCategories");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamCoach", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Team", "Team")
                        .WithMany("TeamCoaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "User")
                        .WithMany("TeamCoaches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamPlayer", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.UserClubMember", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.ClubMember", "ClubMember")
                        .WithOne("UserClubMember")
                        .HasForeignKey("ClubManager.Domain.Entities.MembersTeams.UserClubMember", "ClubMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "User")
                        .WithOne("UserClubMember")
                        .HasForeignKey("ClubManager.Domain.Entities.MembersTeams.UserClubMember", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubMember");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.Match", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Team", "Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.MatchStatistic", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.TrainingCompetition.Match", "Match")
                        .WithMany("MatchStatistic")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("MatchStatistic")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingAttendance", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("TrainingAttendance")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.TrainingCompetition.TrainingSession", "TrainingSessions")
                        .WithMany("TrainingAttendances")
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingSession", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Team", "Team")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Entity", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Revenues");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.RevenueCategory", b =>
                {
                    b.Navigation("Revenues");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.Institution", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("Expense")
                        .IsRequired();

                    b.Navigation("FacilityReservation");

                    b.Navigation("MaintenanceHistory");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("Revenue")
                        .IsRequired();

                    b.Navigation("TeamCoaches");

                    b.Navigation("UserClubMember")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.UserPermissions", b =>
                {
                    b.Navigation("Users")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.UserRoles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.FacilityCategory", b =>
                {
                    b.Navigation("Facility");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.ClubMember", b =>
                {
                    b.Navigation("MinorClubMembers");

                    b.Navigation("PlayerResponsibles");

                    b.Navigation("UserClubMember")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Player", b =>
                {
                    b.Navigation("Entity")
                        .IsRequired();

                    b.Navigation("MatchStatistic");

                    b.Navigation("PlayerContracts");

                    b.Navigation("PlayerPerformanceHistories");

                    b.Navigation("PlayerResponsibles");

                    b.Navigation("PlayerTransfers");

                    b.Navigation("TeamPlayers");

                    b.Navigation("TrainingAttendance");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerCategory", b =>
                {
                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Team", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("TeamCoaches");

                    b.Navigation("TeamPlayers");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamCategory", b =>
                {
                    b.Navigation("Team");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.Match", b =>
                {
                    b.Navigation("MatchStatistic");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingSession", b =>
                {
                    b.Navigation("TrainingAttendances");
                });
#pragma warning restore 612, 618
        }
    }
}
